(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{524:function(t,a,s){"use strict";s.r(a);var e=s(22),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h4",{attrs:{id:"一、gitlab的工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、gitlab的工作流程"}},[t._v("#")]),t._v(" 一、gitlab的工作流程")]),t._v(" "),s("p",[t._v("创建并克隆项目\n创建项目某feature分支\n编写代码并提交至分支\n推送该项目分支至远程gitlab服务器\n进行代码检查并提交master主分支合并申请\n项目领导审查代码并确认合并申请")]),t._v(" "),s("h4",{attrs:{id:"二、gitlab安装配置管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、gitlab安装配置管理"}},[t._v("#")]),t._v(" 二、gitlab安装配置管理")]),t._v(" "),s("p",[t._v("安装Omnibus Gitlab-ce package")]),t._v(" "),s("h5",{attrs:{id:"_1-安装gitlab组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装gitlab组件"}},[t._v("#")]),t._v(" 1.安装gitlab组件")]),t._v(" "),s("p",[t._v("​\tyum -y install curl policycoreutils openssh-server openssh-clients postfix")]),t._v(" "),s("h5",{attrs:{id:"_2-配置yum仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置yum仓库"}},[t._v("#")]),t._v(" 2.配置yum仓库")]),t._v(" "),s("p",[t._v("curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh|sudo bash")]),t._v(" "),s("h5",{attrs:{id:"_3-启动postfix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-启动postfix"}},[t._v("#")]),t._v(" 3.启动postfix")]),t._v(" "),s("p",[t._v("systemctl start postfix && systemctl enable postfix")]),t._v(" "),s("h5",{attrs:{id:"_4-安装gitlab-ce社区版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-安装gitlab-ce社区版本"}},[t._v("#")]),t._v(" 4.安装gitlab-ce社区版本")]),t._v(" "),s("p",[t._v("yum install -y gitlab-ce")]),t._v(" "),s("p",[t._v("Omnibus Gitlab等相关配置初始化并完成安装")]),t._v(" "),s("h6",{attrs:{id:"_1-证书创建与配置加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-证书创建与配置加载"}},[t._v("#")]),t._v(" 1.证书创建与配置加载")]),t._v(" "),s("h6",{attrs:{id:"_2-nginx-ssl代理服务配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-nginx-ssl代理服务配置"}},[t._v("#")]),t._v(" 2.nginx ssl代理服务配置")]),t._v(" "),s("h6",{attrs:{id:"_3-初始化gitlab相关服务并完成安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-初始化gitlab相关服务并完成安装"}},[t._v("#")]),t._v(" 3.初始化gitlab相关服务并完成安装")]),t._v(" "),s("h6",{attrs:{id:"创建证书"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建证书"}},[t._v("#")]),t._v(" 创建证书")]),t._v(" "),s("p",[t._v('mkdir -p /etc/gitlab/ssl\nopenssl genrsa -out "/etc/gitlab/ssl/gitlab.example.com.key" 2048\nopenssl req -new -key "/etc/gitlab/ssl/gitlab.example.com.key" -out "/etc/gitlab/ssl/gitlab.example.com.csr"')]),t._v(" "),s("p",[t._v("cn bj bj\ngitlab.example.com\nadmin@example.com")]),t._v(" "),s("p",[t._v('openssl x509 -req -days 365 -in "/etc/gitlab/ssl/gitlab.example.com.csr" -signkey "/etc/gitlab/ssl/gitlab.example.com.key" -out "/etc/gitlab/ssl/gitlab.example.com.crt"')]),t._v(" "),s("p",[t._v("openssl dhparam -out /etc/gitlab/ssl/dhparams.pem 2048")]),t._v(" "),s("p",[t._v("chmod 600 /etc/gitlab/ssl/*")]),t._v(" "),s("p",[t._v("vim /etc/gitlab/gitlab.rb\n修改以下几个位置")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("external_url "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://gitlab.example.com'")]),t._v("\nnginx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redirect_http_to_https'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nnginx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ssl_certificate'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/etc/gitlab/ssl/gitlab.example.com.crt"')]),t._v("\n\nnginx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ssl_certificate_key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/etc/gitlab/ssl/gitlab.example.com.key"')]),t._v("\n\nnginx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ssl_dhparam'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" /etc/gitlab/ssl/dhparams.pem\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h6",{attrs:{id:"初始化配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化配置"}},[t._v("#")]),t._v(" 初始化配置")]),t._v(" "),s("p",[t._v("gitlab-ctl reconfigure")]),t._v(" "),s("p",[t._v("nginx ssl代理配置\nvim /var/opt/gitlab/nginx/conf/gitlab-http.conf\nserver_name gitlab.example.com;\nrewrite ^(.*)$ https://$host$1 permanent;")]),t._v(" "),s("p",[t._v("gitlab-ctl restart")]),t._v(" "),s("p",[t._v("https://gitlab.example.com")]),t._v(" "),s("h6",{attrs:{id:"邮件配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#邮件配置"}},[t._v("#")]),t._v(" 邮件配置")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("gitlab_rails"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtp_enable'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\ngitlab_rails"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtp_address'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"smtp.qq.com"')]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#发送邮箱的smtp")]),t._v("\ngitlab_rails"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtp_port'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("465")]),t._v("                                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#目前大部分IDC 都封了25端口，需要配置465加密端口才可以发送邮件，这也是为什么不用postfix的原因，以下为阿里云企业邮配置（和腾讯企业邮相同）：")]),t._v("\ngitlab_rails"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtp_user_name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"541885811@qq.com"')]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#发送邮箱地址")]),t._v("\ngitlab_rails"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtp_password'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gydoxozuwzmgbfge"')]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#发送邮箱的密码")]),t._v("\ngitlab_rails"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtp_domain'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"smtp.qq.com"')]),t._v("                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#发送邮箱的后缀")]),t._v("\ngitlab_rails"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtp_authentication'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" :login                         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#开启日志记录")]),t._v("\ngitlab_rails"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtp_enable_starttls_auto'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\ngitlab_rails"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smtp_tls'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\ngitlab_rails"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gitlab_email_from'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"541885811@qq.com"')]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#配置gitlab的配置的发信人")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("gitlab-ctl reconfigure\ngitlab-ctl restart\ngitlab-rails console")]),t._v(" "),s("p",[t._v("Notify.test_email('48211701@qq.com', 'GitLab email', 'Hellow world').deliver_now")]),t._v(" "),s("h5",{attrs:{id:"_5-git使用教程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-git使用教程"}},[t._v("#")]),t._v(" 5.git使用教程")]),t._v(" "),s("p",[t._v("版本控制 git")]),t._v(" "),s("p",[t._v("https://git-scm.com/downloads")]),t._v(" "),s("p",[t._v("git 基本命令")]),t._v(" "),s("p",[t._v("查看配置\ngit config -l\ngit config --system -list\ngit config --global --list")]),t._v(" "),s("p",[t._v("所有的配置都保存在本地")]),t._v(" "),s("p",[t._v("C:\\Program Files\\Git\\etc\\gitconfig")]),t._v(" "),s("p",[t._v("配置账号和邮箱")]),t._v(" "),s("p",[t._v("git config --global user.name “wangkai”\ngit config --blobal user.mail “48211701@qq.com”")]),t._v(" "),s("p",[t._v("git clone")]),t._v(" "),s("p",[t._v("添加所有文件到暂存区\ngit add .")]),t._v(" "),s("p",[t._v("git status")]),t._v(" "),s("p",[t._v("将暂存区的内容提交到本地库\ngit commit -m “1.txt”")]),t._v(" "),s("p",[t._v("-m 添加文件信息")]),t._v(" "),s("p",[t._v("git log 查看历史记录")]),t._v(" "),s("p",[t._v("git push")]),t._v(" "),s("p",[t._v("git init 初始化新建仓库")]),t._v(" "),s("p",[t._v("忽略文件\n在主目录下创建.gitignore文件")]),t._v(" "),s("p",[t._v("忽略")]),t._v(" "),s("p",[t._v(".txt 忽略所有.txt结尾的文件\n!lib.txt 但lib.txt除外\nbuild/忽略build/目录下的所有文件\ndoc/.txt 会忽略doc/notes.txt 但不包括doc/server/arch.txt")]),t._v(" "),s("p",[t._v("生成公钥\nssh-keygen")]),t._v(" "),s("p",[t._v("创建分支\ngit branch 分支名\n查看分支\ngit branch -v\n切换分支\ngit checkout 分支名")]),t._v(" "),s("p",[t._v("git branch -r 列出所有分支")]),t._v(" "),s("p",[t._v("git branch -d 删除分支\ngit branch -dr remote/branch 删除远程分支")]),t._v(" "),s("p",[t._v("git merge branch 合并指定分支到当前分支")]),t._v(" "),s("p",[t._v("git大全\nhttps://gitee.com/all-about-git")]),t._v(" "),s("p",[t._v("团队很重要")]),t._v(" "),s("p",[t._v("新建项目")]),t._v(" "),s("p",[t._v("https://gitlab.example.com/root/testrepo.git")]),t._v(" "),s("p",[t._v("cd d:\ngit -c http.sslVerify=false clone https://gitlab.example.com/root/testrepo.git\ncd d:\\repo\\testrepo")]),t._v(" "),s("p",[t._v('git add .\ngit commit -m"First commit"\ngit config --global user.email "admin@example.com"\ngit config --global user.name "admin"\ngit -c http.sslVerify=false push origin master')]),t._v(" "),s("p",[t._v('git init 初始化\ngit add README.md\ngit commit -m "first commit"\ngit remote add origin https://github.com/xlqywk/jenkins.git\ngit push -u origin master')]),t._v(" "),s("p",[t._v('ssh方式配置\nssh-keygen -t rsa -C "你的Git邮箱"\n复制pub到gitlab')]),t._v(" "),s("p",[t._v('git config --global user.name "wang"\ngit config --global user.email "48211701@qq.com"')]),t._v(" "),s("p",[t._v("git clone git@gitlab.example.com:testgroup/testproject.git")]),t._v(" "),s("p",[t._v('cat ~/.gitconfig\nvim index.html\ngit add .\ngit commit -m "v2"\ngit push')]),t._v(" "),s("p",[t._v("git config --global user.name “name“ #设置全局用户名\ngit config --global user.email xxx@yyy.com #设置全局邮箱\ngit config --global --list #列出用户全局设置,默认保存在~/.gitconfig文件中\ngit add index.html / . #添加指定文件、目录或当前目录下所有数据到暂存区\ngit commit -m “comment“ #提交文件到工作区\ngit status #查看工作区的状态\ngit push #将本地仓库提交代码到远程服务器\ngit pull #从服务器获取代码到本地仓库\ngit log #查看操作日志\nvim .gitignore #定义忽略文件，即不放在仓库的文件\ngit reset --hard HEAD^^ #git版本回滚， HEAD为当前版本，加一个^为上一个，^^为上上一个版本\ngit reflog # #获取每次提交的ID，可以使用--hard根据提交的ID进行版本回退\ngit reset --hard 5ae4b06 #回退到指定id的版本\ngit branch #查看当前所处的分支\ngit checkout -b develop #创建并切换到一个新分支\ngit checkout develop #切换分支")]),t._v(" "),s("h5",{attrs:{id:"_6-gitlab数据备份恢复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-gitlab数据备份恢复"}},[t._v("#")]),t._v(" 6.gitlab数据备份恢复")]),t._v(" "),s("p",[t._v("gitlab-ctl stop unicorn\ngitlab-ctl stop sidekiq\ngitlab-rake gitlab:backup:create\ngitlab-ctl start\nll /var/opt/gitlab/backups/\n恢复\ngitlab-rake gitlab:backup:restore BACKUP=备份文件名")]),t._v(" "),s("h5",{attrs:{id:"_7-git远程仓库地址变更本地如何修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-git远程仓库地址变更本地如何修改"}},[t._v("#")]),t._v(" 7.Git远程仓库地址变更本地如何修改")]),t._v(" "),s("p",[t._v("公司搬移， 作为git仓库的服务器IP地址变了。 本地代码挺多，重新检出太占时间，可以修改一个什么配置让我本地仓库和新的远程仓库建立关联吗， 答案是肯定的！")]),t._v(" "),s("p",[t._v("方法有很多，这里简单介绍几种：\n以下均以项目git_test为例：\n老地址：http://192.168.1.12:9797/john/git_test.git\n新地址：http://192.168.100.235:9797/john/git_test.git\n远程仓库名称： origin")]),t._v(" "),s("h6",{attrs:{id:"方法一-通过命令直接修改远程地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法一-通过命令直接修改远程地址"}},[t._v("#")]),t._v(" 方法一 通过命令直接修改远程地址")]),t._v(" "),s("p",[t._v("进入git_test根目录\ngit remote 查看所有远程仓库， git remote xxx 查看指定远程仓库地址\ngit remote set-url origin http://192.168.100.235:9797/john/git_test.git")]),t._v(" "),s("h6",{attrs:{id:"方法二-通过命令先删除再添加远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法二-通过命令先删除再添加远程仓库"}},[t._v("#")]),t._v(" 方法二 通过命令先删除再添加远程仓库")]),t._v(" "),s("p",[t._v("1.进入git_test根目录")]),t._v(" "),s("p",[t._v("2.git remote 查看所有远程仓库， git remote xxx 查看指定远程仓库地址")]),t._v(" "),s("p",[t._v("3.git remote rm origin")]),t._v(" "),s("p",[t._v("4.git remote add origin http://192.168.100.235:9797/john/git_test.git")]),t._v(" "),s("h6",{attrs:{id:"方法三-直接修改配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法三-直接修改配置文件"}},[t._v("#")]),t._v(" 方法三 直接修改配置文件")]),t._v(" "),s("p",[t._v("进入git_test/.git\nvim config")]),t._v(" "),s("p",[t._v('复制代码\n[core]\nrepositoryformatversion = 0\nfilemode = true\nlogallrefupdates = true\nprecomposeunicode = true\n[remote "origin"]\nurl = http://192.168.100.235:9797/shimanqiang/assistant.git\nfetch = +refs/heads/'),s("em",[t._v(":refs/remotes/origin/")]),t._v('\n[branch "master"]\nremote = origin\nmerge = refs/heads/master\n复制代码\n修改 [remote “origin”]下面的url即可')]),t._v(" "),s("h6",{attrs:{id:"方法四-通过第三方git客户端修改。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法四-通过第三方git客户端修改。"}},[t._v("#")]),t._v(" 方法四 通过第三方git客户端修改。")]),t._v(" "),s("p",[t._v("以SourceTree为例，点击 仓库 -> 仓库配置 -> 远程仓库 即可管理此项目中配置的所有远程仓库， 而且这个界面最下方还可以点击编辑配置文件，同样可以完成方法三。")]),t._v(" "),s("h5",{attrs:{id:"_8-gitlab汉化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-gitlab汉化"}},[t._v("#")]),t._v(" 8.gitlab汉化")]),t._v(" "),s("p",[t._v("默认的全英文界面对于英文水平低的来讲当然用着很不舒服，于是便需要来一波操作进行汉化，英文好的请自觉忽略")]),t._v(" "),s("p",[t._v('GitLab中文社区的项目，v7-v8.8是由Larry Li发起的"GitLab中文社区版项目"（https://gitlab.com/larryli/gitlab），从v8.9之后由@xhang开始继续汉化项目（https://gitlab.com/xhang/gitlab）')]),t._v(" "),s("p",[t._v("[root@gitlab tools]# pwd")]),t._v(" "),s("p",[t._v("/service/tools")]),t._v(" "),s("p",[t._v("[root@gitlab tools]# mkdir /backup")]),t._v(" "),s("p",[t._v("[root@gitlab tools]# cp /opt/gitlab/embedded/service/gitlab-rails/* /backup    #防止汉化失败，备份原文件")]),t._v(" "),s("p",[t._v("[root@gitlab tools]# git clone https://gitlab.com/xhang/gitlab.git        #下载最新的汉化包")]),t._v(" "),s("p",[t._v("汉化包的版本更新速度不得而知，所以尽量不要安装最新版本的gitlab。如果是要下载老版本的汉化包，需要加上老版本的分支，如果想下载10.0.2，可以运行如下语句")]),t._v(" "),s("p",[t._v("[root@gitlab tools]# git clone https://gitlab.com/xhang/gitlab.git -b v12.3.0-zh")]),t._v(" "),s("p",[t._v("[root@gitlab tools]# ls        #git下来的文件为gitlab")]),t._v(" "),s("p",[t._v("gitlab gitlab-ce-10.8.4-ce.0.el7.x86_64.rpm")]),t._v(" "),s("p",[t._v("[root@gitlab tools]# \\cp -rf gitlab/* /opt/gitlab/embedded/service/gitlab-rails/    #拷贝文件")]),t._v(" "),s("p",[t._v("检验汉化")]),t._v(" "),s("p",[t._v("[root@gitlab tools]# gitlab-ctl reconfigure            #加载配置（第一次执行此命令会启动，若只启动执行start）")]),t._v(" "),s("h5",{attrs:{id:"_9-gitlab占用内存大"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-gitlab占用内存大"}},[t._v("#")]),t._v(" 9.gitlab占用内存大")]),t._v(" "),s("p",[t._v("gitlab 一跑起来内存就占一大半，在上传个代码就卡死了有时候，")]),t._v(" "),s("p",[t._v("解决方法：")]),t._v(" "),s("p",[t._v("top -ac 看一下开启了多少unicorn worker进程，gitlab默认开启进程数与CPU内核数相同")]),t._v(" "),s("p",[t._v("解决：")]),t._v(" "),s("p",[t._v("修改gitlab.rb文件（根据实际修改）")]),t._v(" "),s("p",[t._v("1.减少进程数")]),t._v(" "),s("p",[t._v("vim /etc/gitlab/gitlab.rb")]),t._v(" "),s("p",[t._v("unicorn['worker_processes'] = 8\n默认是被注释掉的，官方建议该值是CPU核心数加一，可以提高服务器的响应速度，如果内存只有4G，或者服务器上有其它业务，就不要改了，以免内存不足。另外，这个参数最小值是2，设为1，服务器可能会卡死。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("h6",{attrs:{id:"减少数据库缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减少数据库缓存"}},[t._v("#")]),t._v(" 减少数据库缓存")])])]),t._v(" "),s("p",[t._v("postgresql['shared_buffers'] = \"256MB\"\n默认为256MB，可适当改小")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("h6",{attrs:{id:"减少数据库并发数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减少数据库并发数"}},[t._v("#")]),t._v(" 减少数据库并发数")])])]),t._v(" "),s("p",[t._v("postgresql['max_worker_processes'] = 8\n默认为8，可适当减少")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[s("h6",{attrs:{id:"减少sidekiq并发数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减少sidekiq并发数"}},[t._v("#")]),t._v(" 减少sidekiq并发数")])])]),t._v(" "),s("p",[t._v("Bash")]),t._v(" "),s("p",[t._v("sidekiq['concurrency'] = 25\n默认是25，可适当改小")]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[s("h6",{attrs:{id:"启用swap分区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启用swap分区"}},[t._v("#")]),t._v(" 启用Swap分区")])])]),t._v(" "),s("p",[t._v("使用Swap的方法，请自行搜索")]),t._v(" "),s("p",[t._v("需要注意的是，修改完配置以后，需要执行下面的命令使配置生效：")]),t._v(" "),s("p",[t._v("Bash")]),t._v(" "),s("p",[t._v("sudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n以上就是解决GitLab内存占用过高的几点方法，有什么问题可在文章下方留言一起讨论。")]),t._v(" "),s("p",[t._v("重新加载配置")]),t._v(" "),s("p",[t._v("重启gitlab")]),t._v(" "),s("p",[t._v("（建议worker=CPU核数+1）")]),t._v(" "),s("h5",{attrs:{id:"_10-gitlab优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-gitlab优化"}},[t._v("#")]),t._v(" 10.gitlab优化")]),t._v(" "),s("p",[t._v("修改/etc/gitlab/gitlab.rb配置文件，修改成自己的域名")]),t._v(" "),s("p",[t._v("1 external_url 'http://gitlab.example.com'")]),t._v(" "),s("p",[t._v("修改GitLab仓库存储位置，GitLab仓库默认位子：/var/opt/gitlab/git-data")]),t._v(" "),s("p",[t._v("a、创建/data/soft/gitlab/gitlab-data目录，作为仓库存储目录")]),t._v(" "),s("p",[t._v("命令：mkdir /data/soft/gitlab/gitlab-data")]),t._v(" "),s("p",[t._v("b、修改gitlab配置文件，找到git_data_dir")]),t._v(" "),s("p",[t._v("命令：vim /etc/gitlab/gitlab.rb")]),t._v(" "),s("p",[t._v("增加内容：")]),t._v(" "),s("p",[t._v("1 git_data_dirs({")]),t._v(" "),s("p",[t._v('2  "default" => {')]),t._v(" "),s("p",[t._v('3   "path" => "/data/soft/gitlab/gitlab-data"')]),t._v(" "),s("p",[t._v("4  }")]),t._v(" "),s("p",[t._v("5 })")]),t._v(" "),s("p",[t._v("修改nginx端口，nginx默认端口是80，有可能被占用，修改成其他端口")]),t._v(" "),s("p",[t._v("a、修改/etc/gitlab/gitlab.rb配置文件")]),t._v(" "),s("p",[t._v("1 nginx['listen_port'] = 28000")]),t._v(" "),s("p",[t._v("b、修改/var/opt/gitlab/nginx/conf/gitlab-http.conf文件")]),t._v(" "),s("p",[t._v("1 listen *:28000;")]),t._v(" "),s("p",[t._v("4、修改unicorn端口，unicorn默认端口是8080，有可能被占用，修改成其他端口")]),t._v(" "),s("p",[t._v("a、修改/etc/gitlab/gitlab.rb配置文件")]),t._v(" "),s("p",[t._v("1 unicorn['port'] = 28001")]),t._v(" "),s("p",[t._v("b、修改/var/opt/gitlab/gitlab-rails/etc/unicorn.rb文件")]),t._v(" "),s("p",[t._v('1 listen "127.0.0.1:28001", :tcp_nopush => true')]),t._v(" "),s("p",[t._v("6、优化GitLab性能，修改gitlab配置文件/etc/gitlab/gitlab.rb")]),t._v(" "),s("p",[t._v("官方推荐最低物理配置是 2核4G（本例使用的是1核2G运行比较慢）")]),t._v(" "),s("p",[t._v("a、减少进程数与超时时间")]),t._v(" "),s("p",[t._v("1 # 超时时间")]),t._v(" "),s("p",[t._v("2 unicorn['worker_timeout'] = 60")]),t._v(" "),s("p",[t._v("3")]),t._v(" "),s("p",[t._v("4 # 不能低于2，否则卡死 worker=CPU核数+1")]),t._v(" "),s("p",[t._v("5 unicorn['worker_processes'] = 2")]),t._v(" "),s("p",[t._v("b、GitLab默认使用了PostgreSQL，优化PostgreSQL")]),t._v(" "),s("p",[t._v("# 减少数据库缓存大小 默认256，可适当改小")]),t._v(" "),s("p",[t._v("postgresql['shared_buffers'] = \"256MB\"")]),t._v(" "),s("p",[t._v("# 减少数据库并发数")]),t._v(" "),s("p",[t._v("postgresql['max_worker_processes'] = 8")]),t._v(" "),s("p",[t._v("# 减少sidekiq并发数")]),t._v(" "),s("p",[t._v("sidekiq['concurrency'] = 10")]),t._v(" "),s("p",[t._v("c、减少unicorn内存使用")]),t._v(" "),s("p",[t._v("1 # 减少内存")]),t._v(" "),s("p",[t._v("2 unicorn['worker_memory_limit_min'] = \"200 * 1 << 20\"")]),t._v(" "),s("p",[t._v("3 unicorn['worker_memory_limit_max'] = \"300 * 1 << 20\"")]),t._v(" "),s("p",[t._v("unicorn['worker_timeout'] = 60")]),t._v(" "),s("p",[t._v("#worker=CPU核数+1 573")]),t._v(" "),s("p",[t._v("unicorn['worker_processes'] = 17")]),t._v(" "),s("p",[t._v("���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������")])])}),[],!1,null,null,null);a.default=r.exports}}]);