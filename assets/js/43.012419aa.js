(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{537:function(s,n,t){"use strict";t.r(n);var e=t(22),o=Object(e.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h5",{attrs:{id:"authorized-keys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#authorized-keys"}},[s._v("#")]),s._v(" authorized_keys")]),s._v(" "),t("p",[s._v("我们需要本地机器ssh访问远程服务器时为了减少输入密码的步骤，基本上都会在本地机器生成ssh公钥，然后将本地ssh公钥复制到远程服务器的.ssh/authorized_keys中，这样就可以免密登录了。（ 服务器之间访问同理）。\n流程如下")]),s._v(" "),t("p",[s._v("本机生成 ssh公钥；\n复制本机公钥到远程服务器.ssh/authorized_keys中，authorized_keys文件不存在则创建；\n本机直接ssh连接远程；\n结束")]),s._v(" "),t("h5",{attrs:{id:"known-hosts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#known-hosts"}},[s._v("#")]),s._v(" known_hosts")]),s._v(" "),t("p",[s._v("第一次连接远程数据库时我们可以发现我们本地的.ssh/目录下多了一个文件known_hosts，里面有我们刚刚连接的服务器的信息（如果以前就存在known_hosts，则会发现多了刚刚连接的服务器的信息）。\nknown_hosts文件每连接一个新的远程服务器都会产生一份数据，如下：")]),s._v(" "),t("p",[s._v("0.0.0.0 ecdsa-sha2-nistp256 AAAA...........=")]),s._v(" "),t("p",[s._v("包括远程机器ip、远程机器公钥\nknown_hosts有什么用？\n手动修改一下远程机器A的密钥，然后再连接远程机器A，提示：")]),s._v(" "),t("p",[s._v("The authenticity of host '0.0.0.0 (0.0.0.0)' can't be established.\nECDSA key fingerprint is SHA256:xxxxxxxx.\nAre you sure you want to continue connecting (yes/no)?")]),s._v(" "),t("p",[s._v("得到类似这种提示，大概意思就是登录远程机器A验证失败，然后向你确定是否需要继续连接。\nknown_hosts的作用就很明显了，known_hosts的作用就是记录你曾经远程连接过的机器信息。如果远程机器信息不变，则直接连接，如果改变了ssh就会问你一下，小子，你还连不连了？\n如果你yes， 他就重新保存一份到known_hosts文件了。")])])}),[],!1,null,null,null);n.default=o.exports}}]);