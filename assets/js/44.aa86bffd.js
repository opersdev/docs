(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{539:function(s,n,e){"use strict";e.r(n);var a=e(22),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"_1-docker的思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker的思想"}},[s._v("#")]),s._v(" 1. docker的思想")]),s._v(" "),e("blockquote",[e("p",[s._v("集装箱：会将所有需要的内容放到不同的集装箱中，谁需要这些环境就直接去拿\n标准化：运输标准化，命令标准化，rancher\n隔离性：单独空间")])]),s._v(" "),e("p",[s._v("一款产品：开发--上线 两套环境！应用环境，应用配置！\n开发--运维。问题：环境不一致导致程序异常\n环境配置十分麻烦，费时费力\n传统：开发jar,运维来做打包\n现在：开发打包部署上线，一套流程做完")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/opersdev/image/i/2022/06/15/62a9320fd26aa.png",alt:"image"}})]),s._v(" "),e("p",[s._v("repository,repo\ntag 标签\nnginx:latest")]),s._v(" "),e("p",[s._v("镜像：静态\n容器：动态，生命周期")]),s._v(" "),e("p",[s._v("images,containers,networks,volumes,plugins")]),s._v(" "),e("p",[s._v("镜像地址\nhttps://c.163yun.com/hub\nhttp://hub.daocloud.io")]),s._v(" "),e("h2",{attrs:{id:"_1-1-namespaces资源隔离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-namespaces资源隔离"}},[s._v("#")]),s._v(" 1.1 namespaces资源隔离")]),s._v(" "),e("p",[s._v("PID 进程编号\nnet 网络设备，网络协议栈，端口等\nIPC 信号量，消息队列，共享内存\nMOUNT 文件系统，挂载点\nUTS 主机名和主机域\nUSER 操作进程的用户和用户组")]),s._v(" "),e("p",[s._v("主机级虚拟化\npve,esxi,kvm")]),s._v(" "),e("p",[s._v("缺点：\n1、资源占用多\n2、冗余步骤多\n3、启动慢")]),s._v(" "),e("p",[s._v("虚拟出一套硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件")]),s._v(" "),e("p",[s._v("容器级虚拟化\ndocker\nlxc")]),s._v(" "),e("p",[s._v("容器的应用直接运行在宿主机的内容，没有虚拟硬件和内核\n容器间互相隔离，每个容器内都有一个属于自己的文件系统，互不影响。")]),s._v(" "),e("p",[s._v("应用更快速的交付和部署\n更便捷的升级和扩缩容\n更简单的系统运维\n更高效的计算资源利用")]),s._v(" "),e("h2",{attrs:{id:"_1-2-control-groups"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-control-groups"}},[s._v("#")]),s._v(" 1.2 control groups")]),s._v(" "),e("p",[s._v("blkio:块设备IO\ncpu\ncpuacct:CPU资源使用报告\ncpuset:多处理器平台上的CPU集合\ndevices: 设备访问\nfreezer: 挂起或恢复任务\nmemory:内存用量及报告\nperf_event:对cgroup中的任务进行统一性能测试\nnet_cls:cgroup中的任务创建的数据报文的类别标识符")]),s._v(" "),e("p",[s._v("docker分层构建，零和挂载")]),s._v(" "),e("p",[s._v("nmp\nmachine+swarm+compose\nmesos+marathon\nkubernetes -> k8s\nlibcontainer")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/opersdev/image/i/2022/06/15/62a9321025252.jpg",alt:"img"}})]),s._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/opersdev/image/i/2022/06/15/62a9321078a22.jpg",alt:"img"}})]),s._v(" "),e("h2",{attrs:{id:"_1-3-docker镜像加载原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-docker镜像加载原理"}},[s._v("#")]),s._v(" 1.3 Docker镜像加载原理")]),s._v(" "),e("p",[s._v("UnionFS 联合文件系统\n分层，轻量级并且高性能的文件系统\n一次同时加载多个文件系统，但从外面看起来，只看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录")]),s._v(" "),e("p",[s._v("bootfs和rootfs\nbootfs启动很慢 主要是包含bootloader和kernel，bootloader主要是引导加载kernel\n容器只用rootfs，内核是用宿主机")]),s._v(" "),e("h1",{attrs:{id:"_2-安装-升级docker客户端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装-升级docker客户端"}},[s._v("#")]),s._v(" 2. 安装／升级Docker客户端")]),s._v(" "),e("p",[s._v("yum -y install yum-utils device-mapper-persistent-data lvm2\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo")]),s._v(" "),e("p",[s._v("yum makecache fast\nyum -y install docker-ce")]),s._v(" "),e("p",[s._v("推荐安装1.10.0以上版本的Docker客户端，参考文档 docker-ce\n\\2. 配置镜像加速器")]),s._v(" "),e("p",[s._v("针对Docker客户端版本大于 1.10.0 的用户")]),s._v(" "),e("p",[s._v("您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('mkdir -p /etc/docker\ncat >/etc/docker/daemon.json <<EOF\n{\n "registry-mirrors": ["https://ap7lrs1j.mirror.aliyuncs.com"]\n}\nEOF\n\nsystemctl daemon-reload\n\nsystemctl restart docker && systemctl enable docker\n     \n{\n     "registry-mirrors":["https://registry.docker-cn.com"],\n     "insecure-registries":["ip:port"]\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("快速安装Docker")]),s._v(" "),e("p",[s._v("curl https://releases.rancher.com/install-docker/20.10.sh | sh")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("curl -fsSL get.docker.com -o get-docker.sh\nsh get-docker.sh\nsystemctl restart docker\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h1",{attrs:{id:"_3-基础命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-基础命令"}},[s._v("#")]),s._v(" 3. 基础命令")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v(" docker info\n docker images 显示镜像列表\n docker rmi nginx:latest 镜像删除\n docker pull nginx 仓库下载\n docker run 容器创建启动\n docker start/stop 容器启动停止\n \n docker ps -a 显示容器列表\n docker rm -f wordpress 强制删除\n docker ps -a -q\n docker rm -f $(docker ps -a q)\n \n docker ps --no-trunc 查看\n docker stop/start CONTAINERID\n docker stop/start nginx 启动停止容器\n docker stats nginx 查看容器状态\n docker inspect nginx 查看容器所有基本信息\n docker exec -it nginx /bin/bash 登录容器的bash\n docker logs nginx 查看容器日志\n")])])]),e("p",[s._v("docker logs -tf --tail 10 nginx\ndocker exec 容器名 容器内执行的命令\ndocker history grafana/grafana:7.5.9 查看构建的命令")]),s._v(" "),e("p",[s._v("将宿主机的文件复制到容器内部的指定目录\ndocker cp 文件名称 容器id:容器内部路径")]),s._v(" "),e("p",[s._v("docker cp /opt/software/temp/test/test.txt 688e83c55129:/test/\ndocker cp 688e83c55129:/test/test.txt /opt/software/temp/test/")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v(" docker run \n --restart=always 容器的自动启动\n -h x.xx.xx 设置容器主机名\n --dns xx.xx.xx.xx 设置容器使用的DNS服务器\n --dns-search DNS搜索设置\n --add-host hostname:IP 注入hostname IP解析\n --rm 服务停止时自动删除\n")])])]),e("p",[s._v("volumes目录清理")]),s._v(" "),e("p",[s._v("docker volume rm $(docker volume ls -qf dangling=true)")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v(" docker -d 代表后台运行容器\n      -p 指定映射端口\n      --name 容器名称\n \n docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]\n")])])]),e("p",[s._v("如果已经启动了则可以使用如下命令：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker update --restart=always <CONTAINER ID>\ndocker update --restart=always nginx      更新为开机启动\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("centos 镜像\nhub.c.163.com/public/centos:6.7-tools\n​"),e("br"),s._v("\ndocker run --name mysql -d hub.c.163.com/public/centos:6.7-tools\ndocker run --name tomcat -d -p 8800:8080 hub.c.163.com/library/tomcat")]),s._v(" "),e("p",[s._v("docker pull wordpress\ndocker pull mariadb\ndocker run --name db --env MYSQL_ROOT_PASSWORD=opersdev -d mariadb\ndocker run --name MyWordPress --link db:mysql -p 8080:80 -d wordpress")]),s._v(" "),e("p",[s._v("后台启动容器\ndocker run -d centos\n问题:docker")]),s._v(" "),e("p",[s._v("可视化\nportainer\nrancher (CI/CD)")]),s._v(" "),e("p",[s._v("docker run -d -p 9000:9000 --restart=always --name portainer -v /var/run/docker.sock:/var/run/docker.sock portainer")]),s._v(" "),e("p",[s._v("开启远程连接docker连接2375\n\\1. 编辑docker.service\nvim /usr/lib/systemd/system/docker.service\n找到 ExecStart字段修改如下\nExecStart=/usr/bin/dockerd-current -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock")]),s._v(" "),e("p",[s._v("\\2. 重启docker重新读取配置文件，重新启动docker服务\nsystemctl daemon-reload\nsystemctl restart docker")]),s._v(" "),e("h1",{attrs:{id:"_4-容器转换为镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-容器转换为镜像"}},[s._v("#")]),s._v(" 4. 容器转换为镜像")]),s._v(" "),e("p",[s._v("docker commit mysql mysql:5.1")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v(" 基于容器制作：\n          docker commit \n               docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n                    --author, -a\n                    --pause, -p\n                    --message, -m\n                    \n                    --change, -c\n")])])]),e("p",[s._v("将制作好的镜像打成 tar 包\ndocker save -o tar包的名字 镜像名")]),s._v(" "),e("p",[s._v("导入镜像\ndocker load -i tomcat.image")]),s._v(" "),e("p",[s._v("更改镜像名字\ndocker tag 镜像ID tomcat:8.5")]),s._v(" "),e("p",[s._v("docker commit -m '镜像描述' -a '制作者' 容器名 镜像名")]),s._v(" "),e("p",[s._v("（1）容器中运行多个守护进程时，前面的进程要用后台方式运行（或添加 &），否则后面的服务无法启动")]),s._v(" "),e("p",[s._v("（2）容器中最后一个守护进程一定要用前台方式运行，否则start.sh退出，容器退出，所有的服务就白启动了")]),s._v(" "),e("h1",{attrs:{id:"_5-部署ssm工程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-部署ssm工程"}},[s._v("#")]),s._v(" 5. 部署ssm工程")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v("   修改SSM工程环境，设置为Linux中Docker容器的信息\n")])])]),e("p",[s._v("通过Maven的package重新打成war包\n将Windows下的war包复制到Linux中\n通过docker命令将宿主机的war包复制到容器内部")]),s._v(" "),e("p",[s._v("docker cp 文件名称 容器id:容器内部路径")]),s._v(" "),e("p",[s._v("测试访问SSM工程")]),s._v(" "),e("h1",{attrs:{id:"_6-数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-数据卷"}},[s._v("#")]),s._v(" 6. 数据卷")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v("创建数据卷\n     docker volume create 数据卷名称\n     \\#创建数据卷后，默认会存放在一个目录下/var/lib/docker/volumes/数据卷名称/_data\n查看全部数据卷\n     dcoker volume ls\n查看数据卷详情\n     docker volume inspect 数据卷名称\n删除数据卷\n     docker volume rm 数据卷名称\n容器映射数据卷\n     docker run -d -p 8080:8080 --name tomcat -v 数据卷名称：窗口内部的路径 镜像ID\n     docker run -d -p 8080:8080 --name tomcat -v 路径：容器内部的路径 镜像ID\n")])])]),e("p",[s._v("docker rm -fv tomcat\n--volumes-from 数据共享和容器自己的产生的data")]),s._v(" "),e("h2",{attrs:{id:"_6-1-具名和匿名挂载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-具名和匿名挂载"}},[s._v("#")]),s._v(" 6.1 具名和匿名挂载")]),s._v(" "),e("p",[s._v("匿名挂载 -v 容器内路径 只写容器内路径，挂载到/var/lib/docker目录")]),s._v(" "),e("p",[s._v("具名挂载 -v 卷名:容器内路径\ndocker volume inspect 数据卷名称")]),s._v(" "),e("p",[s._v("所有docker容器内的卷，没有指定目录的情况下都是在/var/lib/docker/volumes/xxxx/_data")]),s._v(" "),e("h1",{attrs:{id:"_7-dockerfile自定义镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-dockerfile自定义镜像"}},[s._v("#")]),s._v(" 7.  dockerfile自定义镜像")]),s._v(" "),e("p",[s._v("dockerfile 是一种被docker程序解释的脚本")]),s._v(" "),e("p",[s._v("底层镜像")]),s._v(" "),e("p",[s._v("https://hub.docker.com/_/alpine")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v(" 转换命令\n")])])]),e("p",[s._v("docker build -t wangyang/jdk-tomcat")]),s._v(" "),e("h2",{attrs:{id:"_7-1-dockerfile-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-dockerfile-命令"}},[s._v("#")]),s._v(" 7.1 Dockerfile 命令")]),s._v(" "),e("p",[s._v("1、FROM（指定基础 image）：\n构建指令，必须指定且需要在 Dockerfile 其他指令的前面。后续的指令都依赖于该指令指定的image。\nFROM 指令指定的基础 image 可以是官方远程仓库中的，也可以位于本地仓库\nexample：\nFROM centos:7.2\nFROM centos")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v(" 2、MAINTAINER（用来指定镜像创建者信息）：\n")])])]),e("p",[s._v('构建指令，用于将image 的制作者相关的信息写入到image 中。当我们对该image 执行docker inspect\n命令时，输出中有相应的字段记录该信息。\nexample：\nMAINTAINER wangyang "wangyang@itxdl.cn"')]),s._v(" "),e("p",[s._v('3、RUN（安装软件用）：\n构建指令，RUN 可以运行任何被基础image 支持的命令。如基础image 选择了Centos，那么软件管理\n部分只能使用Centos 的包管理命令\nexample：\nRUN cd /tmp && curl -L\n\'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.8/bin/apache-tomcat-7.0.8.tar.gz\' | tar -xz\nRUN ["/bin/bash", "-c", "echo hello"]')]),s._v(" "),e("p",[s._v("4、CMD（设置container 启动时执行的操作）：\n设置指令，用于container 启动时指定的操作。该操作可以是执行自定义脚本，也可以是执行系统命令。\n该指令只能在文件中存在一次，如果有多个，则只执行最后一条\nexample：\nCMD echo “Hello, World!”")]),s._v(" "),e("p",[s._v('5、ENTRYPOINT（设置container 启动时执行的操作）:\n设置指令，指定容器启动时执行的命令，可以多次设置，但是只有最后一个有效。\nexample：\nENTRYPOINT ls -l\n#该指令的使用分为两种情况，一种是独自使用，另一种和CMD 指令配合使用。当独自使用时，如果\n你还使用了CMD 命令且CMD 是一个完整的可执行的命令，那么CMD 指令和ENTRYPOINT 会互相\n覆盖只有最后一个CMD 或者ENTRYPOINT 有效\n# CMD 指令将不会被执行，只有ENTRYPOINT 指令被执行\nCMD echo “Hello, World!”\nENTRYPOINT ls -l\n#另一种用法和CMD 指令配合使用来指定ENTRYPOINT 的默认参数，这时CMD 指令不是一个完整\n的可执行命令，仅仅是参数部分；ENTRYPOINT 指令只能使用JSON 方式指定执行命令，而不能指定\n参数\nFROM ubuntu\nCMD ["-l"]\nENTRYPOINT ["/usr/bin/ls"]')]),s._v(" "),e("p",[s._v('6、USER（设置container 容器的用户）：\n设置指令，设置启动容器的用户，默认是root 用户\nexample：\nUSER daemon = ENTRYPOINT ["memcached", "-u", "daemon"]')]),s._v(" "),e("p",[s._v("7、EXPOSE（指定容器需要映射到宿主机器的端口）：设置指令，该指令会将容器中的端口映射成宿\n主机器中的某个端口。当你需要访问容器的时候，可以不是用容器的IP 地址而是使用宿主机器的IP\n地址和映射后的端口。要完成整个操作需要两个步骤，首先在Dockerfile 使用EXPOSE 设置需要映射\n的容器端口，然后在运行容器的时候指定-p 选项加上EXPOSE 设置的端口，这样EXPOSE 设置的端\n口号会被随机映射成宿主机器中的一个端口号。也可以指定需要映射到宿主机器的那个端口，这时要\n确保宿主机器上的端口号没有被使用。EXPOSE 指令可以一次设置多个端口号，相应的运行容器的时\n候，可以配套的多次使用-p 选项。\nexample：\n映射一个端口\nEXPOSE 22\n相应的运行容器使用的命令\ndocker run -p port1 image\n映射多个端口\nEXPOSE port1 port2 port3\n相应的运行容器使用的命令\ndocker run -p port1 -p port2 -p port3 image\n还可以指定需要映射到宿主机器上的某个端口号\ndocker run -p host_port1:port1 -p host_port2:port2 -p host_port3:port3 image")]),s._v(" "),e("p",[s._v("8、ENV（用于设置环境变量）：构建指令，在image 中设置一个环境变量\nexample：\n设置了后，后续的RUN 命令都可以使用，container 启动后，可以通过docker inspect 查看这个环\n境变量，也可以通过在docker run --env key=value 时设置或修改环境变量。假如你安装了JAVA 程序，\n需要设置JAVA_HOME，那么可以在Dockerfile 中这样写：\nENV JAVA_HOME /path/to/java/dirent")]),s._v(" "),e("p",[s._v("9、ADD（从src 复制文件到container 的dest 路径）\nexample：\nADD src dest\nsrc 是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的\n文件url;\ndest 是container 中的绝对路径")]),s._v(" "),e("p",[s._v('10、COPY （从src 复制文件到container 的dest 路径）\nexample：\nCOPY src dest\n11、VOLUME（指定挂载点）：\n设置指令，使容器中的一个目录具有持久化存储数据的功能，该目录可以被容器本身使用，也可以共\n享给其他容器使用。我们知道容器使用的是AUFS，这种文件系统不能持久化数据，当容器关闭后，\n所有的更改都会丢失。当容器中的应用有持久化数据的需求时可以在Dockerfile 中使用该指令\nexamp：\nFROM base\nVOLUME ["/tmp/data"]')]),s._v(" "),e("p",[s._v("12、WORKDIR（切换目录）：设置指令，可以多次切换(相当于cd 命令)，对RUN,CMD,ENTRYPOINT\n生效\nexample：\nWORKDIR /p1 WORKDIR p2 RUN vim a.txt")]),s._v(" "),e("p",[s._v("13、ONBUILD（在子镜像中执行）：ONBUILD 指定的命令在构建镜像时并不执行，而是在它的子\n镜像中执行\nexample：\nONBUILD ADD . /app/src\nONBUILD RUN /usr/local/bin/python-build --dir /app/src")]),s._v(" "),e("h2",{attrs:{id:"_7-2-编写dockerfile文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-编写dockerfile文件"}},[s._v("#")]),s._v(" 7.2 编写Dockerfile文件")]),s._v(" "),e("div",{staticClass:"language-dockerfile line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" hub.c.163.com/public/centos:6.7-tools")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MAINTAINER")]),s._v(" 541885811@qq.com")]),s._v("\n \n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" ./apache-tomcat-9.0.37.tar.gz /root")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" ./jdk-8u211-linux-x64.tar.gz /root")]),s._v("\n \n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" JAVA_HOME /root/jdk1.8.0_211")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" PATH "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_HOME")]),s._v("/bin:"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PATH")])]),s._v("\n \n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" export JAVA_HOME=/root/jdk1.8.0_211")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" export JRE_HOME="),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_HOME")]),s._v("/jre")]),s._v("\n \n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 8080")]),s._v("\n \n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" /root/apache-tomcat-9.0.37/bin/startup.sh && tailf /root/apache-tomcat-9.0.37/logs/catalina.out")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("docker build -t tomcat:v1.0 .\nDockerfile 不能超过128层")]),s._v(" "),e("p",[s._v('通过dockerfile修改账号密码：\nRUN echo "ming:xxxxx" | chpasswd\necho "admin:adminlt" | chpasswd')]),s._v(" "),e("p",[s._v("构建镜像\ndocker build -t nginx:v3 .")]),s._v(" "),e("p",[s._v("Dockfile")]),s._v(" "),e("p",[s._v('FROM centos-nfjt\nVOLUME /opt\nEXPOSE 80\nENTRYPOINT ["nfjt-start.sh"]')]),s._v(" "),e("h1",{attrs:{id:"_8-docker-compose容器编排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-docker-compose容器编排"}},[s._v("#")]),s._v(" 8.  docker-compose容器编排")]),s._v(" "),e("p",[s._v("https://docs.docker.com/compose")]),s._v(" "),e("p",[s._v("docker-compose 来轻松高效的管理容器。定义运行多个容器")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('   sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("在任意目录下输入docker-compose")]),s._v(" "),e("p",[s._v("yml文件以key:value方式来指定配置信息\n多个配置信息以换行+缩进的方式来区分\n在docker-compose.yml文件中，不要使用制表符")]),s._v(" "),e("h2",{attrs:{id:"_8-1-docker-compose模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-docker-compose模板"}},[s._v("#")]),s._v(" 8.1 docker-compose模板")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('version: "3.9"\n    services:\n  db:\n    image: mysql:5.7\n    networks:\n      - net10\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    \n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    networks:\n      - net10\n    volumes:\n      - wordpress_data:/var/www/html\n    ports:\n      - "8000:80"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db:3306\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpressvolumes:\n  db_data: {}\n  wordpress_data: {}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("h2",{attrs:{id:"_8-2-python应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-python应用"}},[s._v("#")]),s._v(" 8.2 python应用")]),s._v(" "),e("p",[s._v("https://docs.docker.com/compose/gettingstarted/")]),s._v(" "),e("p",[s._v("停止 docker-compose down")]),s._v(" "),e("p",[s._v("默认的服务名 文件名_服务名_num\n多个服务器，集群，_num 为了避免冲突")]),s._v(" "),e("p",[s._v("学习，要掌握规律\n只要多写，多看。compose.yaml配置\n官方文档\nhttps://docs.docker.com/compose/compose-file/compose-file-v3/")]),s._v(" "),e("h2",{attrs:{id:"_8-3-构建项目实战"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-构建项目实战"}},[s._v("#")]),s._v(" 8.3 构建项目实战")]),s._v(" "),e("p",[s._v("1、编写项目\n2、dockerfile构建镜像\n3、docker-compose.yaml编排项目\n4、docker-compose up")]),s._v(" "),e("h1",{attrs:{id:"_9-docker-仓库构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-docker-仓库构建"}},[s._v("#")]),s._v(" 9. docker 仓库构建")]),s._v(" "),e("p",[s._v("官方仓库构建\nHarbor 构建")]),s._v(" "),e("h2",{attrs:{id:"_9-1-仓库服务器配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-仓库服务器配置"}},[s._v("#")]),s._v(" 9.1 仓库服务器配置：")]),s._v(" "),e("p",[s._v("docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always registry")]),s._v(" "),e("p",[s._v('vim /etc/docker/daemon.json\n{\n"insecure-registries": ["192.168.200.236:5000"]\n}')]),s._v(" "),e("p",[s._v("docker tag tomcat:v1.0 192.168.200.236:5000/tomcat:v1.0\ndocker push 192.168.200.236:5000/tomcat:v1.0")]),s._v(" "),e("h2",{attrs:{id:"_9-2-客户机设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-客户机设置"}},[s._v("#")]),s._v(" 9.2 客户机设置：")]),s._v(" "),e("p",[s._v('vim /etc/docker/daemon.json\n{\n"insecure-registries": ["192.168.200.236:5000"]\n}\ncurl -XGET http://192.168.200.236:5000/v2/_catalog 查看已有镜像')]),s._v(" "),e("p",[s._v("docker pull 192.168.200.236:5000/tomcat:v1.0")]),s._v(" "),e("h2",{attrs:{id:"_9-3-harbor仓库构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-harbor仓库构建"}},[s._v("#")]),s._v(" 9.3 Harbor仓库构建")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" xf harbor-offline-installer-v1.10.5.tgz \n\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" harbor /usr/local/\n  "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /usr/local/harbor/\n  openssl genrsa -des3 -out server.key "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2048")]),s._v("\n  openssl req -new -key server.key -out server.csr\n\n  openssl req -new -key server.key -out server.csr\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" server.key server.key.org\n  openssl rsa -in server.key.org -out server.key\n  openssl x509 -req -days "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("365")]),s._v(" -in server.csr -signkey server.key -out server.crt\n\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" /opt/cert\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" -R "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("755")]),s._v(" /opt/cert\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" server.* /opt/cert\n\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" harbor.yml\n  ./install.sh \n\n\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /etc/docker/daemon.json \n  systemctl restart "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" tag tomcat:v1.0 hub.aomtop.com/xiaonuo/tomcat:v1.0\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" push hub.aomtop.com/xiaonuo/tomcat:v1.0\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" login hub.aomtop.com\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])]),e("h2",{attrs:{id:"_9-4-上传到hub-docker-com"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-上传到hub-docker-com"}},[s._v("#")]),s._v(" 9.4 上传到hub.docker.com")]),s._v(" "),e("p",[s._v("docker login -t opersdev\ndocker tag mycentos:0.1 opersdev/mycentos\ndocker push opersdev/mycentos")]),s._v(" "),e("h1",{attrs:{id:"_10-网络管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-网络管理"}},[s._v("#")]),s._v(" 10. 网络管理")]),s._v(" "),e("p",[s._v("docker中的所有的网络接口都是虚拟的\ndocker使用网桥和NAT的方式")]),s._v(" "),e("p",[s._v("通过--link来解决连接问题\n--link本质探究 不建议使用--link")]),s._v(" "),e("p",[s._v("docker0问题：他不支持容器名连接访问")]),s._v(" "),e("p",[s._v("容器访问外部网络\niptables -t nat -A POSTROUTING -s 172.17.0.0/16 -o docker0 -j MASQUERADE")]),s._v(" "),e("p",[s._v("外部网络访问容器\niptables -t nat -A PREROUTING -m addrtype -dst-type LOCAL -j DOCKER\niptables -t nat -A DOCKER ! -i docker0 -p tcp -m tcp -dport 80 -j DNAT --to-destination 172.17.0.2:80")]),s._v(" "),e("p",[s._v('进程修改\n-b --bridge="" 默认是docker0\n--bip 指定docker0的IP地址\n--dns 配置容器的DNS')]),s._v(" "),e("p",[s._v("容器修改\n--dns 用于指定容器的DNS\n--net 用于指定容器的网络方式\nbridge\nnone 用于不需要网络的容器\ncontainer 使用其它容器的网络交换机\nhost 表示容器使用HOST的网络，端口全部开放，不安全")]),s._v(" "),e("p",[s._v("端口的暴露方式\n-p :80 将容器端口映射至主机的动态端口\n-p 8080:80 映射至指定端口\n-p IP::80 映射至指定的主机的IP的动态端口\n-p IP:8080:80 映射到指定主机的指定端口\n-P 暴露所需要的所有端口")]),s._v(" "),e("p",[s._v("docker port nginx  查看映射的端口")]),s._v(" "),e("p",[s._v("docker网络隔离"),e("br"),s._v("\ndocker network ls\ndocker network create -d 类型 网络空间名称\n类型分为： overlay network\nbridge network")]),s._v(" "),e("p",[s._v("安装pipework")]),s._v(" "),e("p",[s._v("创建自定义网络\ndocker network create --driver bridge --subnet 192.168.0.1/24 --gateway 192.168.0.1 mynet\ndocker network inspect mynet")]),s._v(" "),e("p",[s._v("docker run -d -P --name tomcat-net-01 --net mynet tomcat")]),s._v(" "),e("p",[s._v("自定义网络默认能通过名称互相ping通")]),s._v(" "),e("p",[s._v("mysql和redis- 不同的网络创建不同的集群，保证集群是安全和健康的")]),s._v(" "),e("p",[s._v("网络连通的操作\ndocker network connect mynet tomcat01\n相当于在tomcat01加了一块网卡用来接在mynet虚拟交换机下面")]),s._v(" "),e("p",[s._v("redis集群创建")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker network create --driver bridge --subnet 172.20.0.0/16 --gateway 172.20.0.1 redis\n\nfor port in $(seq 1 6); \ndo \nmkdir -p /mydata/redis/node-${port}/conf\ncat << EOF >/mydata/redis/node-${port}/conf/redis.conf\nport 6379\nbind 0.0.0.0\ncluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\ncluster-announce-ip 172.20.0.1${port}\ncluster-announce-port 6379\ncluster-announce-bus-port 16379\nappendonly yes\nEOF\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("h5",{attrs:{id:"docker修改容器网络模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker修改容器网络模式"}},[s._v("#")]),s._v(" docker修改容器网络模式")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('一、创建容器时指定网终模式\n\t\tdocker run -d -p 外部访问端口:容器内端口 --net="网络模式"  -v 本机目录:容器内目录 --name="容器名称" 镜像名 要执行的角本\n\t\tdocker ps 查看启动的容器列表\n\t\tdocker ps -a 查看所有的容器列表\n\t\tdocker start 容器名称\t启动容器\n\t\tdocker restart 容器名称\t重启容器\n\t\tdocker stop 容器名称\t停止容器\n\n\t二、已经存在的容器修改网终模式\n\t\t\t\t\t1.找到容器的hostconfig.json文件\n\t\t\tfind / -name hostconfig.json\n\t\t\t/var/lib/docker/containers/a77c1xxx/hostconfig.json\n\t\t\t/var/lib/docker/containers/cdaccxxx/hostconfig.json\n\t\t\t/var/lib/docker/containers/1cdd6dxxx/hostconfig.json\n\t\t\t/var/lib/docker/containers/15c3bcfxxx/hostconfig.json\n\t\t\t修改配置\n\t\t\tvi /var/lib/docker/containers/a77c1xxx/hostconfig.json\n\t\t\t\n\t\t\t"NetworkMode":"bridge"\n\t\t\t为你想要的 模式\n\t\t\t如\n\t\t\t"NetworkMode":"host"\n\t\t\t当为host时或不做端口印射时"PortBindings": {},可以为空对象\n\t\t\t修改端口绑定\t\n\t\t\t"PortBindings":{\n\t\t\t\t"3306/tcp": [{\t\t\t\t//内部端口\n\t\t\t\t\t"HostIp": "",\n\t\t\t\t\t"HostPort": "3309"\t\t外部访问端口\n\t\t\t\t}]\n\t\t\t}\n\t\t\t\n重启容器\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br")])]),e("p",[s._v("容器互访的三种方式")]),s._v(" "),e("p",[s._v("方式一、虚拟IP访问")]),s._v(" "),e("p",[s._v("方式二、link")]),s._v(" "),e("p",[s._v("方式三、创建自定义bridge，通过容器名称访问")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker run -it --name <容器名> ---network <bridge> --network-alias <网络别名> <镜像名>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("https://blog.csdn.net/weixin_41896265/article/details/108245264")]),s._v(" "),e("h1",{attrs:{id:"_11-内存限制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-内存限制"}},[s._v("#")]),s._v(" 11. 内存限制")]),s._v(" "),e("p",[s._v("为应用做内存压力测试，理解正常业务需求下使用的内存情况，然后才能进入生产环境使用\n一定要限制容器的内存使用上限\n尽量保证主机的资源充足，一旦通过监控发现资源不足，就进行扩容或者对容器进行迁移\n如果可以，尽量不要使用swap，swap的使用会导致内存计算复杂，对调度器非常不友好")]),s._v(" "),e("p",[s._v("-m --memory 内存大小，最小4M\n--memory-swap swap大小\n--memory-swappiness\n--memory-reservation 浮动内存\n-kernel-memory 内核内存，最小值为4M\n--oom-kill-disable    是否运行OOM的时候杀死容器")]),s._v(" "),e("h1",{attrs:{id:"_12-cpu资源限制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-cpu资源限制"}},[s._v("#")]),s._v(" 12. CPU资源限制")]),s._v(" "),e("p",[s._v('--cpuset-cpus="" 允许使用的CPU集，值 可以为0-3，0，1\n-c,--cpu-chares=0 CPU共享权重，默认值1024\n--cpuset-mems="" 允许在上执行的内存节点\n--cpu-period=0\n--cpu-quota=0\n--cpus')]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v(" example\n \n docker run -it --cpu-period=50000 --cpu-quota=25000 ubuntu /bin/bash\n \n docker run --name stress -it --rm -m 256m lorel/docker-stress-ng:latest stress -vm 2\n docker run --name stress -it --rm --cpus 2 lorel/docker-stress-ng:latest stress --cpu 8\n docker run --name stress -it --rm --cpuset-cpus 0 lorel/docker-stress-ng:latest stress --cpu 8\n")])])]),e("h1",{attrs:{id:"_13-应用部署模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-应用部署模板"}},[s._v("#")]),s._v(" 13. 应用部署模板")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run --name jms_all -d "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -v /opt/jumpserver/data:/opt/jumpserver/data "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8088")]),s._v(":80 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2222")]),s._v(":2222 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("SECRET_KEY")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("W5Ic3fMXNZ0p5RIy5DhJYJllppTfcfkW8Yuf94VBMfpcssbfu "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("BOOTSTRAP_TOKEN")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("QEkNEMYmCQj0BdcH "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DB_HOST")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".10.230 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DB_PORT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3306")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DB_USER")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("jumpserver "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DB_PASSWORD")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("opersdev "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DB_NAME")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("jumpserver "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REDIS_HOST")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".10.232 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REDIS_PORT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REDIS_PASSWORD")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n --privileged"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n jumpserver/jms_all:v2.5.3\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p /www/zentaopms /www/mysqldata\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" pull easysoft/zentao:12.4.3\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network create --subnet"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.172")]),s._v(".172.0/24 zentaonet\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run --name zentao -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":80 --network"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("zentaonet --ip "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.172")]),s._v(".172.172 --mac-address 02:42:ac:11:00:00 -v /www/zentaopms:/www/zentaopms -v /www/mysqldata:/var/lib/mysql -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" -d easysoft/zentao:12.4.3\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("h1",{attrs:{id:"_14-docker-hub-上传"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-docker-hub-上传"}},[s._v("#")]),s._v(" 14.docker hub 上传")]),s._v(" "),e("p",[s._v("登录\ndocker login")]),s._v(" "),e("p",[s._v("更改镜像名称\ndocker tag zdir opersdev/zdir")]),s._v(" "),e("p",[s._v("上传\ndocker push opersdev/zdir")]),s._v(" "),e("p",[s._v("docker login -u admin  pan.aomtop.com:8082")]),s._v(" "),e("h1",{attrs:{id:"_15-docker报错"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-docker报错"}},[s._v("#")]),s._v(" 15. docker报错")]),s._v(" "),e("p",[s._v("最近在使用docker 构建centos7 容器时，发现无法使用systemctl 命令。后来万能的百度解决了问题，随记之以备后用。")]),s._v(" "),e("p",[s._v("解决办法：")]),s._v(" "),e("p",[s._v("docker run --privileged -it -d centos:7.6.1810 /usr/sbin/init #注意2点：1. --privileged 参数必须加，2. /usr/sbin/init作为容器的启动命令\n验证方法：")]),s._v(" "),e("p",[s._v("docker exec -it $containerID bash #进入容器的bash命令行\nsystemctl #验证systemctl 命令是否可用")]),s._v(" "),e("h1",{attrs:{id:"_16-关于容器内应用真实ip获取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-关于容器内应用真实ip获取"}},[s._v("#")]),s._v(" 16.关于容器内应用真实IP获取")]),s._v(" "),e("h5",{attrs:{id:"nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[s._v("#")]),s._v(" nginx")]),s._v(" "),e("p",[s._v("nginx 获取到的"),e("code",[s._v("$remote_addr")]),s._v("是代理服务器 IP ，因此 "),e("code",[s._v("X-Real-IP")]),s._v(" 并不是用户的 IP。 nginx 要把请求转发给后台服务程序，因此我们需要加上这样一行配置：")]),s._v(" "),e("div",{staticClass:"language-nginx line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nginx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_set_header")]),s._v(" X-Forwarded-For "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$proxy_add_x_forwarded_for")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h5",{attrs:{id:"关于运行在docker内的nginx获取不到真实用户ip这件事"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于运行在docker内的nginx获取不到真实用户ip这件事"}},[s._v("#")]),s._v(" 关于运行在Docker内的Nginx获取不到真实用户IP这件事")]),s._v(" "),e("p",[s._v("https://www.moyufangge.com/2020-12/docker-real-ip/")]),s._v(" "),e("h1",{attrs:{id:"绑定dokcer容器到主机指定网卡的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#绑定dokcer容器到主机指定网卡的方法"}},[s._v("#")]),s._v(" 绑定Dokcer容器到主机指定网卡的方法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('docker network create --subnet=172.18.0.0/16 --opt "com.docker.network.bridge.name"="docker1"  docker1\niptables -t nat -I POSTROUTING -p all -s 172.18.0.0/16 -j SNAT --to-source 10.0.0.100\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);