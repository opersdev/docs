(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{546:function(s,e,a){"use strict";a.r(e);var n=a(22),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"一、nosql概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、nosql概述"}},[s._v("#")]),s._v(" 一、Nosql概述")]),s._v(" "),a("h2",{attrs:{id:"_1、单机mysql时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、单机mysql时代"}},[s._v("#")]),s._v(" 1、单机Mysql时代")]),s._v(" "),a("p",[s._v("90年代,一个网站的访问量一般不会太大，单个数据库完全够用。随着用户增多，网站出现以下问题：")]),s._v(" "),a("ol",[a("li",[s._v("数据量增加到一定程度，单机数据库就放不下了")]),s._v(" "),a("li",[s._v("数据的索引（B+ Tree）,一个机器内存也存放不下")]),s._v(" "),a("li",[s._v("访问量变大后（读写混合），一台服务器承受不住。")])]),s._v(" "),a("p",[s._v("["),a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e1dbf1f.png",alt:"img"}})]),s._v(" "),a("h2",{attrs:{id:"_2、memcached-缓存-mysql-垂直拆分-读写分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、memcached-缓存-mysql-垂直拆分-读写分离"}},[s._v("#")]),s._v(" 2、Memcached(缓存) + Mysql + 垂直拆分（读写分离）")]),s._v(" "),a("p",[s._v("网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！")]),s._v(" "),a("p",[s._v("["),a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e21a0a8.png",alt:"img"}}),s._v("]")]),s._v(" "),a("p",[s._v("优化过程经历了以下几个过程：")]),s._v(" "),a("ol",[a("li",[s._v("优化数据库的数据结构和索引(难度大)")]),s._v(" "),a("li",[s._v("文件缓存，通过IO流获取比每次都访问数据库效率略高，但是流量爆炸式增长时候，IO流也承受不了")]),s._v(" "),a("li",[s._v("MemCache,当时最热门的技术，通过在数据库和数据库访问层之间加上一层缓存，第一次访问时查询数据库，将结果保存到缓存，后续的查询先检查缓存，若有直接拿去使用，效率显著提升。")])]),s._v(" "),a("h2",{attrs:{id:"_3、分库分表-水平拆分-mysql集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、分库分表-水平拆分-mysql集群"}},[s._v("#")]),s._v(" 3、分库分表 + 水平拆分 + Mysql集群")]),s._v(" "),a("p",[s._v("["),a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e26731d.png",alt:"img"}})]),s._v(" "),a("h2",{attrs:{id:"_4、如今最近的年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、如今最近的年代"}},[s._v("#")]),s._v(" 4、如今最近的年代")]),s._v(" "),a("p",[s._v("如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql数据库就能轻松解决这些问题。目前一个基本的互联网项目：")]),s._v(" "),a("p",[s._v("["),a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e2a9751.png",alt:"img"}})]),s._v(" "),a("h2",{attrs:{id:"_5、为什么要用nosql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、为什么要用nosql"}},[s._v("#")]),s._v(" 5、为什么要用NoSQL ？")]),s._v(" "),a("p",[s._v("用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况！")]),s._v(" "),a("h3",{attrs:{id:"什么是nosql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是nosql"}},[s._v("#")]),s._v(" 什么是Nosql")]),s._v(" "),a("p",[s._v("NoSQL = Not Only SQL（不仅仅是SQL）")]),s._v(" "),a("p",[s._v("Not Only Structured Query Language")]),s._v(" "),a("p",[s._v("关系型数据库：列+行，同一个表下数据的结构是一样的。")]),s._v(" "),a("p",[s._v("非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。")]),s._v(" "),a("p",[s._v("NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。")]),s._v(" "),a("h3",{attrs:{id:"nosql特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nosql特点"}},[s._v("#")]),s._v(" Nosql特点")]),s._v(" "),a("p",[s._v("1.方便扩展（数据之间没有关系，很好扩展！）")]),s._v(" "),a("p",[s._v("2.大数据量高性能（Redis一秒可以写8万次，读11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）")]),s._v(" "),a("p",[s._v("3.数据类型是多样型的！（不需要事先设计数据库，随取随用）")]),s._v(" "),a("p",[s._v("4.传统的 RDBMS 和 NoSQL")]),s._v(" "),a("blockquote",[a("p",[s._v("传统的 RDBMS(关系型数据库)")]),s._v(" "),a("blockquote",[a("p",[s._v("结构化组织\nSQL\n数据和关系都存在单独的表中 row col\n操作，数据定义语言\n严格的一致性\n基础的事务\n...")])]),s._v(" "),a("p",[s._v("Nosql")]),s._v(" "),a("blockquote",[a("p",[s._v("不仅仅是数据\n没有固定的查询语言\n键值对存储，列存储，文档存储，图形数据库（社交关系）\n最终一致性\nCAP定理和BASE\n高性能，高可用，高扩展\n...")])])]),s._v(" "),a("p",[s._v("5.大数据时代的3V ：主要是描述问题的")]),s._v(" "),a("p",[s._v("海量Velume")]),s._v(" "),a("p",[s._v("多样Variety")]),s._v(" "),a("p",[s._v("实时Velocity")]),s._v(" "),a("p",[s._v("6.大数据时代的3高 ： 主要是对程序的要求")]),s._v(" "),a("p",[s._v("高并发")]),s._v(" "),a("p",[s._v("高可扩")]),s._v(" "),a("p",[s._v("高性能")]),s._v(" "),a("p",[s._v("真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。")]),s._v(" "),a("h1",{attrs:{id:"二、redis入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、redis入门"}},[s._v("#")]),s._v(" 二、Redis入门")]),s._v(" "),a("h2",{attrs:{id:"redis是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis是什么"}},[s._v("#")]),s._v(" Redis是什么？")]),s._v(" "),a("p",[s._v("Redis（Remote Dictionary Server )，即远程字典服务。")]),s._v(" "),a("p",[s._v("是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。")]),s._v(" "),a("p",[s._v("与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。")]),s._v(" "),a("h2",{attrs:{id:"redis能干什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis能干什么"}},[s._v("#")]),s._v(" Redis能干什么？")]),s._v(" "),a("ol",[a("li",[s._v("内存存储、持久化，内存是断电即失的，所以需要持久化（RDB、AOF）")]),s._v(" "),a("li",[s._v("高效率、用于高速缓冲")]),s._v(" "),a("li",[s._v("发布订阅系统")]),s._v(" "),a("li",[s._v("地图信息分析")]),s._v(" "),a("li",[s._v("计时器、计数器(eg：浏览量)")]),s._v(" "),a("li",[s._v("。。。")])]),s._v(" "),a("h2",{attrs:{id:"特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[s._v("#")]),s._v(" 特性")]),s._v(" "),a("ol",[a("li",[s._v("多样的数据类型")]),s._v(" "),a("li",[s._v("持久化")]),s._v(" "),a("li",[s._v("集群")]),s._v(" "),a("li",[s._v("事务")]),s._v(" "),a("li",[s._v("...")])]),s._v(" "),a("h2",{attrs:{id:"环境搭建-略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建-略"}},[s._v("#")]),s._v(" 环境搭建（略）")]),s._v(" "),a("h2",{attrs:{id:"性能测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能测试"}},[s._v("#")]),s._v(" 性能测试")]),s._v(" "),a("p",[s._v("**redis-benchmark：**Redis官方提供的性能测试工具，参数选项如下：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513214125892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e2ea9cf.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("简单测试：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 测试：100个并发连接 100000请求\nredis-benchmark -h localhost -p 6379 -c 100 -n 100000\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("结果：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200820104343472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e338fc7.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[s._v("#")]),s._v(" 基础知识")]),s._v(" "),a("p",[s._v("redis默认有16个数据库")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200820104357466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e397388.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("默认使用的第0个;")]),s._v(" "),a("p",[s._v("16个数据库为：DB 0~DB 15 默认使用DB 0 ，可以使用"),a("code",[s._v("select n")]),s._v("切换到DB n，"),a("code",[s._v("dbsize")]),s._v("可以查看当前数据库的大小，与key数量相关。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('127.0.0.1:6379> config get databases # 命令行查看数据库数量databases\n1) "databases"\n2) "16"\n127.0.0.1:6379> select 8 # 切换数据库 DB 8\nOK\n127.0.0.1:6379[8]> dbsize # 查看数据库大小\n(integer) 0\n不同数据库之间 数据是不能互通的，并且dbsize 是根据库中key的个数。\n127.0.0.1:6379> set name sakura\nOK\n127.0.0.1:6379> SELECT 8\nOK\n127.0.0.1:6379[8]> get name # db8中并不能获取db0中的键值对。\n(nil)\n127.0.0.1:6379[8]> DBSIZE\n(integer) 0\n127.0.0.1:6379[8]> SELECT 0\nOK\n127.0.0.1:6379> keys *\n\n"counter:rand_int"\n"mylist"\n"name"\n"key:rand_int"\n"myset:rand_int"\n127.0.0.1:6379> DBSIZE # size和key个数相关\n(integer) 5\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[a("code",[s._v("keys *")]),s._v(" ：查看当前数据库中所有的key。")]),s._v(" "),a("p",[a("code",[s._v("flushdb")]),s._v("：清空当前数据库中的键值对。")]),s._v(" "),a("p",[a("code",[s._v("flushall")]),s._v("：清空所有数据库的键值对。")]),s._v(" "),a("blockquote",[a("p",[s._v("Redis是单线程的，Redis是基于内存操作的。")])]),s._v(" "),a("p",[s._v("所以Redis的性能瓶颈不是CPU,而是机器内存和网络带宽。")]),s._v(" "),a("p",[s._v("那么为什么Redis的速度如此快呢，性能这么高呢？QPS达到10W+")]),s._v(" "),a("blockquote",[a("p",[s._v("Redis为什么单线程还这么快？")])]),s._v(" "),a("ul",[a("li",[s._v("误区1：高性能的服务器一定是多线程的？")]),s._v(" "),a("li",[s._v("误区2：多线程（CPU上下文会切换！）一定比单线程效率高！")])]),s._v(" "),a("p",[s._v("核心：Redis是将所有的数据放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！），对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个CPU上的，在内存存储数据情况下，单线程就是最佳的方案。")]),s._v(" "),a("h1",{attrs:{id:"三、五大数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、五大数据类型"}},[s._v("#")]),s._v(" 三、五大数据类型")]),s._v(" "),a("p",[s._v("Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。")]),s._v(" "),a("h2",{attrs:{id:"redis-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-key"}},[s._v("#")]),s._v(" Redis-key")]),s._v(" "),a("p",[s._v("在redis中无论什么数据类型，在数据库中都是以key-value形式保存，通过进行对Redis-key的操作，来完成对数据库中数据的操作。")]),s._v(" "),a("p",[s._v("下面学习的命令：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("exists key")]),s._v("：判断键是否存在")]),s._v(" "),a("li",[a("code",[s._v("del key")]),s._v("：删除键值对")]),s._v(" "),a("li",[a("code",[s._v("move key db")]),s._v("：将键值对移动到指定数据库")]),s._v(" "),a("li",[a("code",[s._v("expire key second")]),s._v("：设置键值对的过期时间")]),s._v(" "),a("li",[a("code",[s._v("type key")]),s._v("：查看value的数据类型")])]),s._v(" "),a("p"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('127.0.0.1:6379> keys * # 查看当前数据库所有key\n(empty list or set)\n127.0.0.1:6379> set name qinjiang # set key\nOK\n127.0.0.1:6379> set age 20\nOK\n127.0.0.1:6379> keys *\n1) "age"\n2) "name"\n127.0.0.1:6379> move age 1 # 将键值对移动到指定数据库\n(integer) 1\n127.0.0.1:6379> EXISTS age # 判断键是否存在\n(integer) 0 # 不存在\n127.0.0.1:6379> EXISTS name\n(integer) 1 # 存在\n127.0.0.1:6379> SELECT 1\nOK\n127.0.0.1:6379[1]> keys *\n1) "age"\n127.0.0.1:6379[1]> del age # 删除键值对\n(integer) 1 # 删除个数\n127.0.0.1:6379> set age 20\nOK\n127.0.0.1:6379> EXPIRE age 15 # 设置键值对的过期时间\n(integer) 1 # 设置成功 开始计数\n127.0.0.1:6379> ttl age # 查看key的过期剩余时间\n(integer) 13\n127.0.0.1:6379> ttl age\n(integer) 11\n127.0.0.1:6379> ttl age\n(integer) 9\n127.0.0.1:6379> ttl age\n(integer) -2 # -2 表示key过期，-1表示key未设置过期时间\n127.0.0.1:6379> get age # 过期的key 会被自动delete\n(nil)\n127.0.0.1:6379> keys *\n\n"name"\n\n127.0.0.1:6379> type name # 查看value的数据类型\nstring\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("p",[s._v("关于TTL命令")]),s._v(" "),a("p",[s._v("Redis的key，通过TTL命令返回key的过期时间，一般来说有3种：")]),s._v(" "),a("ol",[a("li",[s._v("当前key没有设置过期时间，所以会返回-1.")]),s._v(" "),a("li",[s._v("当前key有设置过期时间，而且key已经过期，所以会返回-2.")]),s._v(" "),a("li",[s._v("当前key有设置过期时间，且key还没有过期，故会返回key的正常剩余时间.")])]),s._v(" "),a("p",[s._v("关于重命名"),a("code",[s._v("RENAME")]),s._v("和"),a("code",[s._v("RENAMENX")])]),s._v(" "),a("ol",[a("li",[a("code",[s._v("RENAME key newkey")]),s._v("修改 key 的名称")]),s._v(" "),a("li",[a("code",[s._v("RENAMENX key newkey")]),s._v("仅当 newkey 不存在时，将 key 改名为 newkey 。")])]),s._v(" "),a("h2",{attrs:{id:"string-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-字符串"}},[s._v("#")]),s._v(" String(字符串)")]),s._v(" "),a("p",[s._v("普通的set、get直接略过。")]),s._v(" "),a("p",[s._v("常用命令及其示例：")]),s._v(" "),a("p",[a("code",[s._v("APPEND key value")]),s._v(": 向指定的key的value后追加字符串")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('127.0.0.1:6379> set msg hello \nOK \n127.0.0.1:6379> append msg " world" \n(integer) 11 \n127.0.0.1:6379> get msg \n“hello world”\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("code",[s._v("DECR/INCR key")]),s._v(": 将指定key的value数值进行+1/-1(仅对于数字)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> set age 20 \nOK \n127.0.0.1:6379> incr age \n(integer) 21 \n127.0.0.1:6379> decr age \n(integer) 20\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("code",[s._v("INCRBY/DECRBY key n")]),s._v(": 按指定的步长对数值进行加减")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> INCRBY age 5\n(integer) 25 \n127.0.0.1:6379> DECRBY age 10 \n(integer) 15\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("INCRBYFLOAT key n")]),s._v(": 为数值加上浮点型数值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> INCRBYFLOAT age 5.2 \n“20.2”\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("STRLEN key")]),s._v(": 获取key保存值的字符串长度")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> get msg \n“hello world” \n127.0.0.1:6379> STRLEN msg \n(integer) 11\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("GETRANGE key start end")]),s._v(": 按起止位置获取字符串（闭区间，起止位置都取）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> get msg \n“hello world” \n127.0.0.1:6379> GETRANGE msg 3 9 \n“lo worl”\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("SETRANGE key offset value")]),s._v(":用指定的value 替换key中 offset开始的值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('127.0.0.1:6379> set msg hello\nOK\n127.0.0.1:6379> setrange msg 2 hello\n(integer) 7\n127.0.0.1:6379> get msg\n"hehello"\n127.0.0.1:6379> set msg2 world\nOK\n127.0.0.1:6379> setrange msg2 2 ww\n(integer) 5\n127.0.0.1:6379> get msg2\n"wowwd"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("code",[s._v("GETSET key value")]),s._v(": 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> GETSET msg test \n“hello world”\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("SETNX key value")]),s._v(": 仅当key不存在时进行set")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> SETNX msg test \n(integer) 0 \n127.0.0.1:6379> SETNX name sakura \n(integer) 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("SETEX key seconds value")]),s._v(": set 键值对并设置过期时间")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> setex name 10 root \nOK \n127.0.0.1:6379> get name \n(nil)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("MSET key1 value1 [key2 value2..]")]),s._v(": 批量set键值对")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> MSET k1 v1 k2 v2 k3 v3 \nOK\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("MSETNX key1 value1 [key2 value2..]")]),s._v(": 批量设置键值对，仅当参数中所有的key都不存在时执行")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> MSETNX k1 v1 k4 v4 \n(integer) 0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("MGET key1 [key2..]")]),s._v(": 批量获取多个key保存的值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> MGET k1 k2 k3 \n1) “v1” \n2) “v2” \n3) “v3”\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("PSETEX key milliseconds value")]),s._v(": 和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间")]),s._v(" "),a("p",[s._v("String类似的使用场景：value除了是字符串还可以是数字，用途举例：")]),s._v(" "),a("ul",[a("li",[s._v("计数器")]),s._v(" "),a("li",[s._v("统计多单位的数量：uid:123666：follow 0")]),s._v(" "),a("li",[s._v("粉丝数")]),s._v(" "),a("li",[s._v("对象存储缓存")])]),s._v(" "),a("h2",{attrs:{id:"list-列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-列表"}},[s._v("#")]),s._v(" List(列表)")]),s._v(" "),a("p",[s._v("Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）")]),s._v(" "),a("p",[s._v("一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。")]),s._v(" "),a("p",[s._v("首先我们列表，可以经过规则定义将其变为队列、栈、双端队列等。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200820104440398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e3df8e5.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("正如图Redis中List是可以进行双端操作的，所以命令也就分为了LXXX和RLLL两类，有时候L也表示List例如LLEN")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("LPUSH/RPUSH key value1[value2..]")]),s._v("从左边/右边向列表中PUSH值(一个或者多个)。")]),s._v(" "),a("li",[a("code",[s._v("LRANGE key start end")]),s._v(" 获取list 起止元素==（索引从左往右 递增）==")]),s._v(" "),a("li",[a("code",[s._v("LPUSHX/RPUSHX key value")]),s._v(" 向已存在的列名中push值（一个或者多个）")]),s._v(" "),a("li",[a("code",[s._v("LINSERT key BEFORE|AFTER pivot value")]),s._v(" 在指定列表元素的前/后 插入value")]),s._v(" "),a("li",[a("code",[s._v("LLEN key")]),s._v(" 查看列表长度")]),s._v(" "),a("li",[a("code",[s._v("LINDEX key index")]),s._v(" 通过索引获取列表元素")]),s._v(" "),a("li",[a("code",[s._v("LSET key index value")]),s._v(" 通过索引为元素设值")]),s._v(" "),a("li",[a("code",[s._v("LPOP/RPOP key")]),s._v(" 从最左边/最右边移除值 并返回")]),s._v(" "),a("li",[a("code",[s._v("RPOPLPUSH source destination")]),s._v(" 将列表的尾部(右)最后一个值弹出，并返回，然后加到另一个列表的头部")]),s._v(" "),a("li",[a("code",[s._v("LTRIM key start end")]),s._v(" 通过下标截取指定范围内的列表")]),s._v(" "),a("li",[a("code",[s._v("LREM key count value")]),s._v(" List中是允许value重复的 count > 0：从头部开始搜索 然后删除指定的value 至多删除count个 count < 0：从尾部开始搜索… count = 0：删除列表中所有的指定value。")]),s._v(" "),a("li",[a("code",[s._v("BLPOP/BRPOP key1[key2] timout")]),s._v(" 移出并获取列表的第一个/最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")]),s._v(" "),a("li",[a("code",[s._v("BRPOPLPUSH source destination timeout")]),s._v(" 和RPOPLPUSH功能相同，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")])]),s._v(" "),a("p",[s._v("代码示例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('---------------------------LPUSH---RPUSH---LRANGE--------------------------------\n127.0.0.1:6379> LPUSH mylist k1 # LPUSH mylist=>{1}\n(integer) 1\n127.0.0.1:6379> LPUSH mylist k2 # LPUSH mylist=>{2,1}\n(integer) 2\n127.0.0.1:6379> RPUSH mylist k3 # RPUSH mylist=>{2,1,3}\n(integer) 3\n127.0.0.1:6379> get mylist # 普通的get是无法获取list值的\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n127.0.0.1:6379> LRANGE mylist 0 4 # LRANGE 获取起止位置范围内的元素\n\n"k2"\n"k1"\n"k3"\n127.0.0.1:6379> LRANGE mylist 0 2\n"k2"\n"k1"\n"k3"\n127.0.0.1:6379> LRANGE mylist 0 1\n"k2"\n"k1"\n127.0.0.1:6379> LRANGE mylist 0 -1 # 获取全部元素\n"k2"\n"k1"\n"k3"\n\n---------------------------LPUSHX---RPUSHX-----------------------------------\n127.0.0.1:6379> LPUSHX list v1 # list不存在 LPUSHX失败\n(integer) 0\n127.0.0.1:6379> LPUSHX list v1 v2\n(integer) 0\n127.0.0.1:6379> LPUSHX mylist k4 k5 # 向mylist中 左边 PUSH k4 k5\n(integer) 5\n127.0.0.1:6379> LRANGE mylist 0 -1\n\n"k5"\n"k4"\n"k2"\n"k1"\n"k3"\n\n---------------------------LINSERT--LLEN--LINDEX--LSET----------------------------\n127.0.0.1:6379> LINSERT mylist after k2 ins_key1 # 在k2元素后 插入ins_key1\n(integer) 6\n127.0.0.1:6379> LRANGE mylist 0 -1\n\n"k5"\n"k4"\n"k2"\n"ins_key1"\n"k1"\n"k3"\n127.0.0.1:6379> LLEN mylist # 查看mylist的长度\n(integer) 6\n127.0.0.1:6379> LINDEX mylist 3 # 获取下标为3的元素\n"ins_key1"\n127.0.0.1:6379> LINDEX mylist 0\n"k5"\n127.0.0.1:6379> LSET mylist 3 k6 # 将下标3的元素 set值为k6\nOK\n127.0.0.1:6379> LRANGE mylist 0 -1\n"k5"\n"k4"\n"k2"\n"k6"\n"k1"\n"k3"\n\n---------------------------LPOP--RPOP--------------------------\n127.0.0.1:6379> LPOP mylist # 左侧(头部)弹出\n"k5"\n127.0.0.1:6379> RPOP mylist # 右侧(尾部)弹出\n"k3"\n---------------------------RPOPLPUSH--------------------------\n127.0.0.1:6379> LRANGE mylist 0 -1\n\n"k4"\n"k2"\n"k6"\n"k1"\n127.0.0.1:6379> RPOPLPUSH mylist newlist # 将mylist的最后一个值(k1)弹出，加入到newlist的头部\n"k1"\n127.0.0.1:6379> LRANGE newlist 0 -1\n"k1"\n127.0.0.1:6379> LRANGE mylist 0 -1\n"k4"\n"k2"\n"k6"\n\n---------------------------LTRIM--------------------------\n127.0.0.1:6379> LTRIM mylist 0 1 # 截取mylist中的 0~1部分\nOK\n127.0.0.1:6379> LRANGE mylist 0 -1\n\n"k4"\n"k2"\n\n初始 mylist: k2,k2,k2,k2,k2,k2,k4,k2,k2,k2,k2\n---------------------------LREM--------------------------\n127.0.0.1:6379> LREM mylist 3 k2 # 从头部开始搜索 至多删除3个 k2\n(integer) 3\n删除后：mylist: k2,k2,k2,k4,k2,k2,k2,k2\n127.0.0.1:6379> LREM mylist -2 k2 #从尾部开始搜索 至多删除2个 k2\n(integer) 2\n删除后：mylist: k2,k2,k2,k4,k2,k2\n---------------------------BLPOP--BRPOP--------------------------\nmylist: k2,k2,k2,k4,k2,k2\nnewlist: k1\n127.0.0.1:6379> BLPOP newlist mylist 30 # 从newlist中弹出第一个值，mylist作为候选\n\n"newlist" # 弹出\n"k1"\n127.0.0.1:6379> BLPOP newlist mylist 30\n"mylist" # 由于newlist空了 从mylist中弹出\n"k2"\n127.0.0.1:6379> BLPOP newlist 30\n(30.10s) # 超时了\n\n127.0.0.1:6379> BLPOP newlist 30 # 我们连接另一个客户端向newlist中push了test, 阻塞被解决。\n\n"newlist"\n"test"\n(12.54s)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br")])]),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("ul",[a("li",[s._v("list实际上是一个链表，before Node after , left, right 都可以插入值")]),s._v(" "),a("li",[s._v("如果key不存在，则创建新的链表")]),s._v(" "),a("li",[s._v("如果key存在，新增内容")]),s._v(" "),a("li",[s._v("如果移除了所有值，空链表，也代表不存在")]),s._v(" "),a("li",[s._v("在两边插入或者改动值，效率最高！修改中间元素，效率相对较低")])]),s._v(" "),a("p",[s._v("应用：")]),s._v(" "),a("p",[s._v("消息排队！消息队列（Lpush Rpop）,栈（Lpush Lpop）")]),s._v(" "),a("h2",{attrs:{id:"set-集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-集合"}},[s._v("#")]),s._v(" Set(集合）")]),s._v(" "),a("p",[s._v("Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。")]),s._v(" "),a("p",[s._v("Redis中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。")]),s._v(" "),a("p",[s._v("集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("SADD key member1[member2..]")]),s._v(" 向集合中无序增加一个/多个成员")]),s._v(" "),a("li",[a("code",[s._v("SCARD key")]),s._v(" 获取集合的成员数")]),s._v(" "),a("li",[a("code",[s._v("SMEMBERS key")]),s._v(" 返回集合中所有的成员")]),s._v(" "),a("li",[a("code",[s._v("SISMEMBER key member")]),s._v(" 查询member元素是否是集合的成员,结果是无序的")]),s._v(" "),a("li",[a("code",[s._v("SRANDMEMBER key [count]")]),s._v(" 随机返回集合中count个成员，count缺省值为1")]),s._v(" "),a("li",[a("code",[s._v("SPOP key [count]")]),s._v(" 随机移除并返回集合中count个成员，count缺省值为1")]),s._v(" "),a("li",[a("code",[s._v("SMOVE source destination member")]),s._v(" 将source集合的成员member移动到destination集合")]),s._v(" "),a("li",[a("code",[s._v("SREM key member1[member2..]")]),s._v(" 移除集合中一个/多个成员")]),s._v(" "),a("li",[a("code",[s._v("SDIFF key1[key2..]")]),s._v(" 返回所有集合的差集 key1- key2 - …")]),s._v(" "),a("li",[a("code",[s._v("SDIFFSTORE destination key1[key2..]")]),s._v(" 在SDIFF的基础上，将结果保存到集合中==(覆盖)==。不能保存到其他类型key噢！")]),s._v(" "),a("li",[a("code",[s._v("SINTER key1 [key2..]")]),s._v(" 返回所有集合的交集")]),s._v(" "),a("li",[a("code",[s._v("SINTERSTORE destination key1[key2..]")]),s._v(" 在SINTER的基础上，存储结果到集合中。覆盖")]),s._v(" "),a("li",[a("code",[s._v("SUNION key1 [key2..]")]),s._v(" 返回所有集合的并集")]),s._v(" "),a("li",[a("code",[s._v("SUNIONSTORE destination key1 [key2..]")]),s._v(" 在SUNION的基础上，存储结果到及和张。覆盖")]),s._v(" "),a("li",[a("code",[s._v("SSCAN KEY [MATCH pattern] [COUNT count]")]),s._v(" 在大量数据环境下，使用此命令遍历集合中元素，每次遍历部分")])]),s._v(" "),a("p",[s._v("代码示例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('---------------SADD--SCARD--SMEMBERS--SISMEMBER--------------------\n127.0.0.1:6379> SADD myset m1 m2 m3 m4 # 向myset中增加成员 m1~m4\n(integer) 4\n127.0.0.1:6379> SCARD myset # 获取集合的成员数目\n(integer) 4\n127.0.0.1:6379> smembers myset # 获取集合中所有成员\n\n"m4"\n"m3"\n"m2"\n"m1"\n127.0.0.1:6379> SISMEMBER myset m5 # 查询m5是否是myset的成员\n(integer) 0 # 不是，返回0\n127.0.0.1:6379> SISMEMBER myset m2\n(integer) 1 # 是，返回1\n127.0.0.1:6379> SISMEMBER myset m3\n(integer) 1\n\n---------------------SRANDMEMBER--SPOP----------------------------------\n127.0.0.1:6379> SRANDMEMBER myset 3 # 随机返回3个成员\n\n"m2"\n"m3"\n"m4"\n127.0.0.1:6379> SRANDMEMBER myset # 随机返回1个成员\n"m3"\n127.0.0.1:6379> SPOP myset 2 # 随机移除并返回2个成员\n"m1"\n"m4"\n\n将set还原到{m1,m2,m3,m4}\n---------------------SMOVE--SREM----------------------------------------\n127.0.0.1:6379> SMOVE myset newset m3 # 将myset中m3成员移动到newset集合\n(integer) 1\n127.0.0.1:6379> SMEMBERS myset\n\n"m4"\n"m2"\n"m1"\n127.0.0.1:6379> SMEMBERS newset\n"m3"\n127.0.0.1:6379> SREM newset m3 # 从newset中移除m3元素\n(integer) 1\n127.0.0.1:6379> SMEMBERS newset\n(empty list or set)\n\n下面开始是多集合操作,多集合操作中若只有一个参数默认和自身进行运算\nsetx=>{m1,m2,m4,m6}, sety=>{m2,m5,m6}, setz=>{m1,m3,m6}\n-----------------------------SDIFF------------------------------------\n127.0.0.1:6379> SDIFF setx sety setz # 等价于setx-sety-setz\n\n"m4"\n127.0.0.1:6379> SDIFF setx sety # setx - sety\n"m4"\n"m1"\n127.0.0.1:6379> SDIFF sety setx # sety - setx\n"m5"\n\n-------------------------SINTER---------------------------------------\n共同关注（交集）\n127.0.0.1:6379> SINTER setx sety setz # 求 setx、sety、setx的交集\n\n"m6"\n127.0.0.1:6379> SINTER setx sety # 求setx sety的交集\n"m2"\n"m6"\n\n-------------------------SUNION---------------------------------------\n127.0.0.1:6379> SUNION setx sety setz # setx sety setz的并集\n\n"m4"\n"m6"\n"m3"\n"m2"\n"m1"\n"m5"\n127.0.0.1:6379> SUNION setx sety # setx sety 并集\n"m4"\n"m6"\n"m2"\n"m1"\n"m5"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br")])]),a("h2",{attrs:{id:"hash-哈希"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash-哈希"}},[s._v("#")]),s._v(" Hash（哈希）")]),s._v(" "),a("p",[s._v("Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。")]),s._v(" "),a("p",[s._v("Set就是一种简化的Hash,只变动key,而value使用默认值填充。可以将一个Hash表作为一个对象进行存储，表中存放对象的信息。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("HSET key field value")]),s._v(" 将哈希表 key 中的字段 field 的值设为 value 。重复设置同一个field会覆盖,返回0")]),s._v(" "),a("li",[a("code",[s._v("HMSET key field1 value1 [field2 value2..]")]),s._v(" 同时将多个 field-value (域-值)对设置到哈希表 key 中。")]),s._v(" "),a("li",[a("code",[s._v("HSETNX key field value")]),s._v(" 只有在字段 field 不存在时，设置哈希表字段的值。")]),s._v(" "),a("li",[a("code",[s._v("HEXISTS key field")]),s._v(" 查看哈希表 key 中，指定的字段是否存在。")]),s._v(" "),a("li",[a("code",[s._v("HGET key field value")]),s._v(" 获取存储在哈希表中指定字段的值")]),s._v(" "),a("li",[a("code",[s._v("HMGET key field1 [field2..]")]),s._v(" 获取所有给定字段的值")]),s._v(" "),a("li",[a("code",[s._v("HGETALL key")]),s._v(" 获取在哈希表key 的所有字段和值")]),s._v(" "),a("li",[a("code",[s._v("HKEYS key")]),s._v(" 获取哈希表key中所有的字段")]),s._v(" "),a("li",[a("code",[s._v("HLEN key")]),s._v(" 获取哈希表中字段的数量")]),s._v(" "),a("li",[a("code",[s._v("HVALS key")]),s._v(" 获取哈希表中所有值")]),s._v(" "),a("li",[a("code",[s._v("HDEL key field1 [field2..]")]),s._v(" 删除哈希表key中一个/多个field字段")]),s._v(" "),a("li",[a("code",[s._v("HINCRBY key field n")]),s._v(" 为哈希表 key 中的指定字段的整数值加上增量n，并返回增量后结果 一样只适用于整数型字段")]),s._v(" "),a("li",[a("code",[s._v("HINCRBYFLOAT key field n")]),s._v(" 为哈希表 key 中的指定字段的浮点数值加上增量 n。")]),s._v(" "),a("li",[a("code",[s._v("HSCAN key cursor [MATCH pattern] [COUNT count]")]),s._v(" 迭代哈希表中的键值对。")])]),s._v(" "),a("p",[s._v("代码示例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('------------------------HSET--HMSET--HSETNX----------------\n127.0.0.1:6379> HSET studentx name sakura # 将studentx哈希表作为一个对象，设置name为sakura\n(integer) 1\n127.0.0.1:6379> HSET studentx name gyc # 重复设置field进行覆盖，并返回0\n(integer) 0\n127.0.0.1:6379> HSET studentx age 20 # 设置studentx的age为20\n(integer) 1\n127.0.0.1:6379> HMSET studentx sex 1 tel 15623667886 # 设置sex为1，tel为15623667886\nOK\n127.0.0.1:6379> HSETNX studentx name gyc # HSETNX 设置已存在的field\n(integer) 0 # 失败\n127.0.0.1:6379> HSETNX studentx email 12345@qq.com\n(integer) 1 # 成功\n----------------------HEXISTS--------------------------------\n127.0.0.1:6379> HEXISTS studentx name # name字段在studentx中是否存在\n(integer) 1 # 存在\n127.0.0.1:6379> HEXISTS studentx addr\n(integer) 0 # 不存在\n-------------------HGET--HMGET--HGETALL-----------\n127.0.0.1:6379> HGET studentx name # 获取studentx中name字段的value\n"gyc"\n127.0.0.1:6379> HMGET studentx name age tel # 获取studentx中name、age、tel字段的value\n\n"gyc"\n"20"\n"15623667886"\n127.0.0.1:6379> HGETALL studentx # 获取studentx中所有的field及其value\n"name"\n"gyc"\n"age"\n"20"\n"sex"\n"1"\n"tel"\n"15623667886"\n"email"\n"12345@qq.com"\n\n--------------------HKEYS--HLEN--HVALS--------------\n127.0.0.1:6379> HKEYS studentx # 查看studentx中所有的field\n\n"name"\n"age"\n"sex"\n"tel"\n"email"\n127.0.0.1:6379> HLEN studentx # 查看studentx中的字段数量\n(integer) 5\n127.0.0.1:6379> HVALS studentx # 查看studentx中所有的value\n"gyc"\n"20"\n"1"\n"15623667886"\n"12345@qq.com"\n\n-------------------------HDEL--------------------------\n127.0.0.1:6379> HDEL studentx sex tel # 删除studentx 中的sex、tel字段\n(integer) 2\n127.0.0.1:6379> HKEYS studentx\n\n"name"\n"age"\n"email"\n\n-------------HINCRBY--HINCRBYFLOAT------------------------\n127.0.0.1:6379> HINCRBY studentx age 1 # studentx的age字段数值+1\n(integer) 21\n127.0.0.1:6379> HINCRBY studentx name 1 # 非整数字型字段不可用\n(error) ERR hash value is not an integer\n127.0.0.1:6379> HINCRBYFLOAT studentx weight 0.6 # weight字段增加0.6\n"90.8"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br")])]),a("p",[s._v("Hash变更的数据user name age，尤其是用户信息之类的，经常变动的信息！Hash更适合于对象的存储，Sring更加适合字符串存储！")]),s._v(" "),a("h2",{attrs:{id:"zset-有序集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zset-有序集合"}},[s._v("#")]),s._v(" Zset（有序集合）")]),s._v(" "),a("p",[s._v("不同的是每个元素都会关联一个double类型的分数（score）。redis正是通过分数来为集合中的成员进行从小到大的排序。")]),s._v(" "),a("p",[s._v("score相同：按字典顺序排序")]),s._v(" "),a("p",[s._v("有序集合的成员是唯一的,但分数(score)却可以重复。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("ZADD key score member1 [score2 member2]")]),s._v(" 向有序集合添加一个或多个成员，或者更新已存在成员的分数")]),s._v(" "),a("li",[a("code",[s._v("ZCARD key")]),s._v(" 获取有序集合的成员数")]),s._v(" "),a("li",[a("code",[s._v("ZCOUNT key min max")]),s._v(" 计算在有序集合中指定区间score的成员数")]),s._v(" "),a("li",[a("code",[s._v("ZINCRBY key n member")]),s._v(" 有序集合中对指定成员的分数加上增量 n")]),s._v(" "),a("li",[a("code",[s._v("ZSCORE key member")]),s._v(" 返回有序集中，成员的分数值")]),s._v(" "),a("li",[a("code",[s._v("ZRANK key member")]),s._v(" 返回有序集合中指定成员的索引")]),s._v(" "),a("li",[a("code",[s._v("ZRANGE key start end")]),s._v(" 通过索引区间返回有序集合成指定区间内的成员")]),s._v(" "),a("li",[a("code",[s._v("ZRANGEBYLEX key min max")]),s._v(" 通过字典区间返回有序集合的成员")]),s._v(" "),a("li",[a("code",[s._v("ZRANGEBYSCORE key min max")]),s._v(" 通过分数返回有序集合指定区间内的成员==-inf 和 +inf分别表示最小最大值，只支持开区间()==")]),s._v(" "),a("li",[a("code",[s._v("ZLEXCOUNT key min max")]),s._v(" 在有序集合中计算指定字典区间内成员数量")]),s._v(" "),a("li",[a("code",[s._v("ZREM key member1 [member2..]")]),s._v(" 移除有序集合中一个/多个成员")]),s._v(" "),a("li",[a("code",[s._v("ZREMRANGEBYLEX key min max")]),s._v(" 移除有序集合中给定的字典区间的所有成员")]),s._v(" "),a("li",[a("code",[s._v("ZREMRANGEBYRANK key start stop")]),s._v(" 移除有序集合中给定的排名区间的所有成员")]),s._v(" "),a("li",[a("code",[s._v("ZREMRANGEBYSCORE key min max")]),s._v(" 移除有序集合中给定的分数区间的所有成员")]),s._v(" "),a("li",[a("code",[s._v("ZREVRANGE key start end")]),s._v(" 返回有序集中指定区间内的成员，通过索引，分数从高到底")]),s._v(" "),a("li",[a("code",[s._v("ZREVRANGEBYSCORRE key max min")]),s._v(" 返回有序集中指定分数区间内的成员，分数从高到低排序")]),s._v(" "),a("li",[a("code",[s._v("ZREVRANGEBYLEX key max min")]),s._v(" 返回有序集中指定字典区间内的成员，按字典顺序倒序")]),s._v(" "),a("li",[a("code",[s._v("ZREVRANK key member")]),s._v(" 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序")]),s._v(" "),a("li",[a("code",[s._v("ZINTERSTORE destination numkeys key1 [key2 ..]")]),s._v(" 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中，numkeys：表示参与运算的集合数，将score相加作为结果的score")]),s._v(" "),a("li",[a("code",[s._v("ZUNIONSTORE destination numkeys key1 [key2..]")]),s._v(" 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中")]),s._v(" "),a("li",[a("code",[s._v("ZSCAN key cursor [MATCH pattern\\] [COUNT count]")]),s._v(" 迭代有序集合中的元素（包括元素成员和元素分值）")])]),s._v(" "),a("p",[s._v("代码示例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('-------------------ZADD--ZCARD--ZCOUNT--------------\n127.0.0.1:6379> ZADD myzset 1 m1 2 m2 3 m3 # 向有序集合myzset中添加成员m1 score=1 以及成员m2 score=2..\n(integer) 2\n127.0.0.1:6379> ZCARD myzset # 获取有序集合的成员数\n(integer) 2\n127.0.0.1:6379> ZCOUNT myzset 0 1 # 获取score在 [0,1]区间的成员数量\n(integer) 1\n127.0.0.1:6379> ZCOUNT myzset 0 2\n(integer) 2\n----------------ZINCRBY--ZSCORE--------------------------\n127.0.0.1:6379> ZINCRBY myzset 5 m2 # 将成员m2的score +5\n"7"\n127.0.0.1:6379> ZSCORE myzset m1 # 获取成员m1的score\n"1"\n127.0.0.1:6379> ZSCORE myzset m2\n"7"\n--------------ZRANK--ZRANGE-----------------------------------\n127.0.0.1:6379> ZRANK myzset m1 # 获取成员m1的索引，索引按照score排序，score相同索引值按字典顺序顺序增加\n(integer) 0\n127.0.0.1:6379> ZRANK myzset m2\n(integer) 2\n127.0.0.1:6379> ZRANGE myzset 0 1 # 获取索引在 0~1的成员\n\n"m1"\n"m3"\n127.0.0.1:6379> ZRANGE myzset 0 -1 # 获取全部成员\n"m1"\n"m3"\n"m2"\n\ntestset=>{abc,add,amaze,apple,back,java,redis} score均为0\n------------------ZRANGEBYLEX---------------------------------\n127.0.0.1:6379> ZRANGEBYLEX testset - + # 返回所有成员\n\n"abc"\n"add"\n"amaze"\n"apple"\n"back"\n"java"\n"redis"\n127.0.0.1:6379> ZRANGEBYLEX testset - + LIMIT 0 3 # 分页 按索引显示查询结果的 0,1,2条记录\n"abc"\n"add"\n"amaze"\n127.0.0.1:6379> ZRANGEBYLEX testset - + LIMIT 3 3 # 显示 3,4,5条记录\n"apple"\n"back"\n"java"\n127.0.0.1:6379> ZRANGEBYLEX testset (- [apple # 显示 (-,apple] 区间内的成员\n"abc"\n"add"\n"amaze"\n"apple"\n127.0.0.1:6379> ZRANGEBYLEX testset [apple [java # 显示 [apple,java]字典区间的成员\n"apple"\n"back"\n"java"\n\n-----------------------ZRANGEBYSCORE---------------------\n127.0.0.1:6379> ZRANGEBYSCORE myzset 1 10 # 返回score在 [1,10]之间的的成员\n\n"m1"\n"m3"\n"m2"\n127.0.0.1:6379> ZRANGEBYSCORE myzset 1 5\n"m1"\n"m3"\n\n--------------------ZLEXCOUNT-----------------------------\n127.0.0.1:6379> ZLEXCOUNT testset - +\n(integer) 7\n127.0.0.1:6379> ZLEXCOUNT testset [apple [java\n(integer) 3\n------------------ZREM--ZREMRANGEBYLEX--ZREMRANGBYRANK--ZREMRANGEBYSCORE--------------------------------\n127.0.0.1:6379> ZREM testset abc # 移除成员abc\n(integer) 1\n127.0.0.1:6379> ZREMRANGEBYLEX testset [apple [java # 移除字典区间[apple,java]中的所有成员\n(integer) 3\n127.0.0.1:6379> ZREMRANGEBYRANK testset 0 1 # 移除排名0~1的所有成员\n(integer) 2\n127.0.0.1:6379> ZREMRANGEBYSCORE myzset 0 3 # 移除score在 [0,3]的成员\n(integer) 2\ntestset=> {abc,add,apple,amaze,back,java,redis} score均为0\nmyzset=> {(m1,1),(m2,2),(m3,3),(m4,4),(m7,7),(m9,9)}\n----------------ZREVRANGE--ZREVRANGEBYSCORE--ZREVRANGEBYLEX-----------\n127.0.0.1:6379> ZREVRANGE myzset 0 3 # 按score递减排序，然后按索引，返回结果的 0~3\n\n"m9"\n"m7"\n"m4"\n"m3"\n127.0.0.1:6379> ZREVRANGE myzset 2 4 # 返回排序结果的 索引的2~4\n"m4"\n"m3"\n"m2"\n127.0.0.1:6379> ZREVRANGEBYSCORE myzset 6 2 # 按score递减顺序 返回集合中分数在[2,6]之间的成员\n"m4"\n"m3"\n"m2"\n127.0.0.1:6379> ZREVRANGEBYLEX testset [java (add # 按字典倒序 返回集合中(add,java]字典区间的成员\n"java"\n"back"\n"apple"\n"amaze"\n\n-------------------------ZREVRANK------------------------------\n127.0.0.1:6379> ZREVRANK myzset m7 # 按score递减顺序，返回成员m7索引\n(integer) 1\n127.0.0.1:6379> ZREVRANK myzset m2\n(integer) 4\nmathscore=>{(xm,90),(xh,95),(xg,87)} 小明、小红、小刚的数学成绩\nenscore=>{(xm,70),(xh,93),(xg,90)} 小明、小红、小刚的英语成绩\n-------------------ZINTERSTORE--ZUNIONSTORE-----------------------------------\n127.0.0.1:6379> ZINTERSTORE sumscore 2 mathscore enscore # 将mathscore enscore进行合并 结果存放到sumscore\n(integer) 3\n127.0.0.1:6379> ZRANGE sumscore 0 -1 withscores # 合并后的score是之前集合中所有score的和\n\n"xm"\n"160"\n"xg"\n"177"\n"xh"\n"188"\n\n127.0.0.1:6379> ZUNIONSTORE lowestscore 2 mathscore enscore AGGREGATE MIN # 取两个集合的成员score最小值作为结果的\n(integer) 3\n127.0.0.1:6379> ZRANGE lowestscore 0 -1 withscores\n\n"xm"\n"70"\n"xg"\n"87"\n"xh"\n"93"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br")])]),a("p",[s._v("应用案例：")]),s._v(" "),a("ol",[a("li",[s._v("set排序 存储班级成绩表 工资表排序！")]),s._v(" "),a("li",[s._v("普通消息，1.重要消息 2.带权重进行判断")]),s._v(" "),a("li",[s._v("排行榜应用实现，取Top N测试")])]),s._v(" "),a("h1",{attrs:{id:"四、三种特殊数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、三种特殊数据类型"}},[s._v("#")]),s._v(" 四、三种特殊数据类型")]),s._v(" "),a("h2",{attrs:{id:"geospatial-地理位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#geospatial-地理位置"}},[s._v("#")]),s._v(" Geospatial(地理位置)")]),s._v(" "),a("p",[s._v("使用经纬度定位地理坐标并用一个有序集合zset保存，所以zset命令也可以使用")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("geoadd key longitud(经度) latitude(纬度) member [..]")]),s._v(" 将具体经纬度的坐标存入一个有序集合")]),s._v(" "),a("li",[a("code",[s._v("geopos key member [member..]")]),s._v(" 获取集合中的一个/多个成员坐标")]),s._v(" "),a("li",[a("code",[s._v("geodist key member1 member2 [unit]")]),s._v(" 返回两个给定位置之间的距离。默认以米作为单位。")]),s._v(" "),a("li",[a("code",[s._v("georadius key longitude latitude radius m|km|mi|ft [WITHCOORD][WITHDIST] [WITHHASH] [COUNT count]")]),s._v(" 以给定的经纬度为中心， 返回集合包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。")]),s._v(" "),a("li",[a("code",[s._v("GEORADIUSBYMEMBER key member radius...")]),s._v(" 功能与GEORADIUS相同，只是中心位置不是具体的经纬度，而是使用结合中已有的成员作为中心点。")]),s._v(" "),a("li",[a("code",[s._v("geohash key member1 [member2..]")]),s._v(" 返回一个或多个位置元素的Geohash表示。使用Geohash位置52点整数编码。")])]),s._v(" "),a("h3",{attrs:{id:"有效经纬度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有效经纬度"}},[s._v("#")]),s._v(" 有效经纬度")]),s._v(" "),a("ul",[a("li",[s._v("有效的经度从-180度到180度。")]),s._v(" "),a("li",[s._v("有效的纬度从-85.05112878度到85.05112878度。")])]),s._v(" "),a("p",[s._v("指定单位的参数 unit 必须是以下单位的其中一个：")]),s._v(" "),a("p",[s._v("m 表示单位为米。")]),s._v(" "),a("p",[s._v("km 表示单位为千米。")]),s._v(" "),a("p",[s._v("mi 表示单位为英里。")]),s._v(" "),a("p",[s._v("ft 表示单位为英尺。")]),s._v(" "),a("h3",{attrs:{id:"关于georadius的参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于georadius的参数"}},[s._v("#")]),s._v(" 关于GEORADIUS的参数")]),s._v(" "),a("p",[s._v("通过georadius就可以完成 附近的人功能")]),s._v(" "),a("p",[s._v("withcoord:带上坐标")]),s._v(" "),a("p",[s._v("withdist:带上距离，单位与半径单位相同")]),s._v(" "),a("p",[s._v("COUNT n : 只显示前n个(按距离递增排序)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('----------------georadius---------------------\n127.0.0.1:6379> GEORADIUS china:city 120 30 500 km withcoord withdist # 查询经纬度(120,30)坐标500km半径内的成员\n1) 1) "hangzhou"\n   2) "29.4151"\n   3) 1) "120.20000249147415"\n      2) "30.199999888333501"\n2) 1) "shanghai"\n   2) "205.3611"\n   3) 1) "121.40000134706497"\n      2) "31.400000253193539"\n------------geohash---------------------------\n127.0.0.1:6379> geohash china:city yichang shanghai # 获取成员经纬坐标的geohash表示\n\n"wmrjwbr5250"\n"wtw6ds0y300"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"hyperloglog-基数统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hyperloglog-基数统计"}},[s._v("#")]),s._v(" Hyperloglog(基数统计)")]),s._v(" "),a("p",[s._v("Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。")]),s._v(" "),a("p",[s._v("花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。")]),s._v(" "),a("p",[s._v("因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。")]),s._v(" "),a("p",[s._v("其底层使用string数据类型。")]),s._v(" "),a("h3",{attrs:{id:"什么是基数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是基数"}},[s._v("#")]),s._v(" 什么是基数？")]),s._v(" "),a("p",[s._v("数据集中不重复的元素的个数。")]),s._v(" "),a("h3",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景：")]),s._v(" "),a("p",[s._v("网页的访问量（UV）：一个用户多次访问，也只能算作一个人。")]),s._v(" "),a("p",[s._v("传统实现，存储用户的id,然后每次进行比较。当用户变多之后这种方式及其浪费空间，而我们的目的只是计数，Hyperloglog就能帮助我们利用最小的空间完成。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("PFADD key element1 [elememt2..]")]),s._v(" 添加指定元素到 HyperLogLog中")]),s._v(" "),a("li",[a("code",[s._v("PFCOUNT key [key]")]),s._v(" 返回给定 HyperLogLog 的基数估算值。")]),s._v(" "),a("li",[a("code",[s._v("PFMERGE destkey sourcekey [sourcekey..]")]),s._v(" 将多个 HyperLogLog 合并为一个 HyperLogLog")])]),s._v(" "),a("p",[s._v("代码示例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("----------PFADD--PFCOUNT---------------------\n127.0.0.1:6379> PFADD myelemx a b c d e f g h i j k # 添加元素\n(integer) 1\n127.0.0.1:6379> type myelemx # hyperloglog底层使用String\nstring\n127.0.0.1:6379> PFCOUNT myelemx # 估算myelemx的基数\n(integer) 11\n127.0.0.1:6379> PFADD myelemy i j k z m c b v p q s\n(integer) 1\n127.0.0.1:6379> PFCOUNT myelemy\n(integer) 11\n----------------PFMERGE-----------------------\n127.0.0.1:6379> PFMERGE myelemz myelemx myelemy # 合并myelemx和myelemy 成为myelemz\nOK\n127.0.0.1:6379> PFCOUNT myelemz # 估算基数\n(integer) 17\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"bitmaps-位图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bitmaps-位图"}},[s._v("#")]),s._v(" BitMaps(位图)")]),s._v(" "),a("p",[s._v("使用位存储，信息状态只有 0 和 1")]),s._v(" "),a("p",[s._v("Bitmap是一串连续的2进制数字（0或1），每一位所在的位置为偏移(offset)，在bitmap上可执行AND,OR,XOR,NOT以及其它位操作。")]),s._v(" "),a("p",[s._v("应用场景: 签到统计、状态统计")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("setbit key offset value")]),s._v(" 为指定key的offset位设置值")]),s._v(" "),a("li",[a("code",[s._v("getbit key offset")]),s._v(" 获取offset位的值")]),s._v(" "),a("li",[a("code",[s._v("bitcount key [start end]")]),s._v(" 统计字符串被设置为1的bit数，也可以指定统计范围按字节")]),s._v(" "),a("li",[a("code",[s._v("bitop operration destkey key[key..]")]),s._v(" 对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。")]),s._v(" "),a("li",[a("code",[s._v("BITPOS key bit [start] [end]")]),s._v(" 返回字符串里面第一个被设置为1或者0的bit位。start和end只能按字节,不能按位")])]),s._v(" "),a("p",[s._v("代码示例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("------------setbit--getbit--------------\n127.0.0.1:6379> setbit sign 0 1 # 设置sign的第0位为 1 \n(integer) 0\n127.0.0.1:6379> setbit sign 2 1 # 设置sign的第2位为 1  不设置默认 是0\n(integer) 0\n127.0.0.1:6379> setbit sign 3 1\n(integer) 0\n127.0.0.1:6379> setbit sign 5 1\n(integer) 0\n127.0.0.1:6379> type sign\nstring\n127.0.0.1:6379> getbit sign 2 # 获取第2位的数值\n(integer) 1\n127.0.0.1:6379> getbit sign 3\n(integer) 1\n127.0.0.1:6379> getbit sign 4 # 未设置默认是0\n(integer) 0\n-----------bitcount----------------------------\n127.0.0.1:6379> BITCOUNT sign # 统计sign中为1的位数\n(integer) 4\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h1",{attrs:{id:"五、事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、事务"}},[s._v("#")]),s._v(" 五、事务")]),s._v(" "),a("p",[s._v("Redis的单条命令是保证原子性的，但是redis事务不能保证原子性")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Redis事务本质：一组命令的集合。\n----------------- 队列 set set set 执行 -------------------\n事务中每条命令都会被序列化，执行过程中按顺序执行，不允许其他命令进行干扰。\n一次性\n顺序性\n排他性\nRedis事务没有隔离级别的概念\nRedis单条命令是保证原子性的，但是事务不保证原子性！\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("Redis事务操作过程")]),s._v(" "),a("ul",[a("li",[s._v("开启事务（multi）")]),s._v(" "),a("li",[s._v("命令入队")]),s._v(" "),a("li",[s._v("执行事务（exec）")])]),s._v(" "),a("p",[s._v("所以事务中的命令在加入时都没有被执行，直到提交时才会开始执行(Exec)一次性完成。")]),s._v(" "),a("h2",{attrs:{id:"正常执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正常执行"}},[s._v("#")]),s._v(" 正常执行")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('127.0.0.1:6379> multi # 开启事务\nOK\n127.0.0.1:6379> set k1 v1 # 命令入队\nQUEUED\n127.0.0.1:6379> set k2 v2 # ..\nQUEUED\n127.0.0.1:6379> get k1\nQUEUED\n127.0.0.1:6379> set k3 v3\nQUEUED\n127.0.0.1:6379> keys *\nQUEUED\n127.0.0.1:6379> exec # 事务执行\n1) OK\n2) OK\n3) "v1"\n4) OK\n5) 1) "k3"\n   2) "k2"\n   3) "k1"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h2",{attrs:{id:"取消事务-discurd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取消事务-discurd"}},[s._v("#")]),s._v(" 取消事务(discurd)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> multi\nOK\n127.0.0.1:6379> set k1 v1\nQUEUED\n127.0.0.1:6379> set k2 v2\nQUEUED\n127.0.0.1:6379> DISCARD # 放弃事务\nOK\n127.0.0.1:6379> EXEC \n(error) ERR EXEC without MULTI # 当前未开启事务\n127.0.0.1:6379> get k1 # 被放弃事务中命令并未执行\n(nil)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"事务错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务错误"}},[s._v("#")]),s._v(" 事务错误")]),s._v(" "),a("blockquote",[a("p",[s._v("代码语法错误（编译时异常）所有的命令都不执行")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> multi\nOK\n127.0.0.1:6379> set k1 v1\nQUEUED\n127.0.0.1:6379> set k2 v2\nQUEUED\n127.0.0.1:6379> error k1 # 这是一条语法错误命令\n(error) ERR unknown command `error`, with args beginning with: `k1`, # 会报错但是不影响后续命令入队 \n127.0.0.1:6379> get k2\nQUEUED\n127.0.0.1:6379> EXEC\n(error) EXECABORT Transaction discarded because of previous errors. # 执行报错\n127.0.0.1:6379> get k1 \n(nil) # 其他命令并没有被执行\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("blockquote",[a("p",[s._v("代码逻辑错误 (运行时异常) **其他命令可以正常执行 ** >>> 所以不保证事务原子性")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('127.0.0.1:6379> multi\nOK\n127.0.0.1:6379> set k1 v1\nQUEUED\n127.0.0.1:6379> set k2 v2\nQUEUED\n127.0.0.1:6379> INCR k1 # 这条命令逻辑错误（对字符串进行增量）\nQUEUED\n127.0.0.1:6379> get k2\nQUEUED\n127.0.0.1:6379> exec\n1) OK\n2) OK\n3) (error) ERR value is not an integer or out of range # 运行时报错\n4) "v2" # 其他命令正常执行\n虽然中间有一条命令报错了，但是后面的指令依旧正常执行成功了。\n所以说Redis单条指令保证原子性，但是Redis事务不能保证原子性。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("strong",[s._v("监控")]),s._v("\n悲观锁：")]),s._v(" "),a("ul",[a("li",[s._v("很悲观，认为什么时候都会出现问题，无论做什么都会加锁")])]),s._v(" "),a("p",[s._v("乐观锁：")]),s._v(" "),a("ul",[a("li",[s._v("很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据")]),s._v(" "),a("li",[s._v("获取version")]),s._v(" "),a("li",[s._v("更新的时候比较version")])]),s._v(" "),a("p",[s._v("使用watch key监控指定数据，相当于乐观锁加锁。")]),s._v(" "),a("blockquote",[a("p",[s._v("正常执行")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> set money 100 # 设置余额:100\nOK\n127.0.0.1:6379> set use 0 # 支出使用:0\nOK\n127.0.0.1:6379> watch money # 监视money (上锁)\nOK\n127.0.0.1:6379> multi\nOK\n127.0.0.1:6379> DECRBY money 20\nQUEUED\n127.0.0.1:6379> INCRBY use 20\nQUEUED\n127.0.0.1:6379> exec # 监视值没有被中途修改，事务正常执行\n1) (integer) 80\n2) (integer) 20\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("测试多线程修改值，使用watch可以当做redis的乐观锁操作（相当于getversion）")]),s._v(" "),a("p",[s._v("我们启动另外一个客户端模拟插队线程。")]),s._v(" "),a("p",[s._v("线程1：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> watch money # money上锁\nOK\n127.0.0.1:6379> multi\nOK\n127.0.0.1:6379> DECRBY money 20\nQUEUED\n127.0.0.1:6379> INCRBY use 20\nQUEUED\n127.0.0.1:6379>     # 此时事务并没有执行\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("模拟线程插队，线程2：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> INCRBY money 500 # 修改了线程一中监视的money\n(integer) 600\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("回到线程1，执行事务：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('127.0.0.1:6379> EXEC # 执行之前，另一个线程修改了我们的值，这个时候就会导致事务执行失败\n(nil) # 没有结果，说明事务执行失败\n127.0.0.1:6379> get money # 线程2 修改生效\n"600"\n127.0.0.1:6379> get use # 线程1事务执行失败，数值没有被修改\n"0"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("解锁获取最新值，然后再加锁进行事务。")]),s._v(" "),a("p",[s._v("unwatch进行解锁。")]),s._v(" "),a("p",[s._v("注意：每次提交执行exec后都会自动释放锁，不管是否成功")]),s._v(" "),a("h1",{attrs:{id:"六、jedis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、jedis"}},[s._v("#")]),s._v(" 六、Jedis")]),s._v(" "),a("p",[s._v("使用Java来操作Redis，Jedis是Redis官方推荐使用的Java连接redis的客户端。")]),s._v(" "),a("p",[s._v("1.导入依赖")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\x3c!--导入jredis的包--\x3e\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>3.2.0</version>\n</dependency>\n\x3c!--fastjson--\x3e\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.70</version>\n</dependency>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("2.编码测试")]),s._v(" "),a("blockquote",[a("p",[s._v("连接数据库\n操作命令\n断开连接")])]),s._v(" "),a("p",[s._v("代码示例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class TestPing {\n    public static void main(String[] args) {\n        Jedis jedis = new Jedis("192.168.xx.xxx", 6379);\n        String response = jedis.ping();\n        System.out.println(response); // PONG\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("输出PONG")]),s._v(" "),a("h2",{attrs:{id:"常用的api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的api"}},[s._v("#")]),s._v(" 常用的API")]),s._v(" "),a("p",[s._v("string、list、set、hash、zset")]),s._v(" "),a("p",[s._v("所有的api命令，就是我们对应的上面学习的指令，一个都没有变化！")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class TestTX {\n    public static void main(String[] args) {\n        Jedis jedis = new Jedis("127.0.0.1", 6379);\n        jedis.flushDB();\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put("hello","world");\n        jsonObject.put("name","kuangshen");\n        // 开启事务\n        Transaction multi = jedis.multi();\n        String result = jsonObject.toJSONString();\n        // jedis.watch(result)\n        try {\n            multi.set("user1",result);\n            multi.set("user2",result);\n            int i = 1/0 ; // 代码抛出异常事务，执行失败！\n            multi.exec(); // 执行事务！\n        } catch (Exception e) {\n            multi.discard(); // 放弃事务\n            e.printStackTrace();\n        } finally {\n            System.out.println(jedis.get("user1"));\n            System.out.println(jedis.get("user2"));\n            jedis.close(); // 关闭连接\n        }\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h1",{attrs:{id:"七、springboot整合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、springboot整合"}},[s._v("#")]),s._v(" 七、SpringBoot整合")]),s._v(" "),a("p",[s._v("SpringBoot 操作数据：spring-data jpa jdbc mongodb redis！")]),s._v(" "),a("p",[s._v("SpringData 也是和 SpringBoot 齐名的项目！")]),s._v(" "),a("p",[s._v("说明： 在 SpringBoot2.x 之后，原来使用的jedis 被替换为了 lettuce?")]),s._v(" "),a("p",[s._v("jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接池！ 更像 BIO 模式")]),s._v(" "),a("p",[s._v("lettuce : 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据了，更像 NIO 模式")]),s._v(" "),a("p",[s._v("源码分析：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Bean\n@ConditionalOnMissingBean(name = "redisTemplate") \n// 我们可以自己定义一个redisTemplate来替换这个默认的！\npublic RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException {\n// 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化！\n// 两个泛型都是 Object, Object 的类型，我们后使用需要强制转换 <String, Object>\n    RedisTemplate<Object, Object> template = new RedisTemplate<>();\n    template.setConnectionFactory(redisConnectionFactory);\n    return template;\n}\n@Bean\n@ConditionalOnMissingBean // 由于 String 是redis中最常使用的类型，所以说单独提出来了一个bean！\npublic StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException {\n    StringRedisTemplate template = new StringRedisTemplate();\n    template.setConnectionFactory(redisConnectionFactory);\n    return template;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"整合测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整合测试"}},[s._v("#")]),s._v(" 整合测试")]),s._v(" "),a("p",[s._v("1.导入依赖")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("springboot 2.x后 ，原来使用的 Jedis 被 lettuce 替换。")]),s._v(" "),a("p",[s._v("jedis：采用的直连，多个线程操作的话，是不安全的。如果要避免不安全，使用jedis pool连接池！更像BIO模式")]),s._v(" "),a("p",[s._v("lettuce：采用netty，实例可以在多个线程中共享，不存在线程不安全的情况！可以减少线程数据了，更像NIO模式")]),s._v(" "),a("p",[s._v("我们在学习SpringBoot自动配置的原理时，整合一个组件并进行配置一定会有一个自动配置类xxxAutoConfiguration,并且在spring.factories中也一定能找到这个类的完全限定名。Redis也不例外。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513214531573.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e427e78.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("那么就一定还存在一个RedisProperties类")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513214607475.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e457f82.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("@ConditionalOnClass注解中有两个类是默认不存在的，所以Jedis是无法生效的")]),s._v(" "),a("p",[s._v("然后再看Lettuce：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513214618179.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e487134.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("完美生效。")]),s._v(" "),a("p",[s._v("现在我们回到RedisAutoConfiguratio")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/2020051321462777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e4b6913.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("只有两个简单的Bean")]),s._v(" "),a("ul",[a("li",[s._v("RedisTemplate")]),s._v(" "),a("li",[s._v("StringRedisTemplate")])]),s._v(" "),a("p",[s._v("当看到xxTemplate时可以对比RestTemplat、SqlSessionTemplate,通过使用这些Template来间接操作组件。那么这俩也不会例外。分别用于操作Redis和Redis中的String数据类型。")]),s._v(" "),a("p",[s._v("在RedisTemplate上也有一个条件注解，说明我们是可以对其进行定制化的")]),s._v(" "),a("p",[s._v("说完这些，我们需要知道如何编写配置文件然后连接Redis，就需要阅读RedisProperties")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513214638238.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e4ec64e.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("这是一些基本的配置属性。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513214649380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e527efd.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("还有一些连接池相关的配置。注意使用时一定使用"),a("strong",[s._v("Lettuce")]),s._v("的连接池。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513214700372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e558cc3.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("2.编写配置文件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 配置redis\nspring.redis.host=39.99.xxx.xx\nspring.redis.port=6379\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("3.使用RedisTemplate")]),s._v(" "),a("p",[s._v("@SpringBootTest")]),s._v(" "),a("p",[s._v("class Redis02SpringbootApplicationTests {")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@Autowired\nprivate RedisTemplate redisTemplate;\n\n@Test\nvoid contextLoads() {\n\n    // redisTemplate 操作不同的数据类型，api和我们的指令是一样的\n    // opsForValue 操作字符串 类似String\n    // opsForList 操作List 类似List\n    // opsForSet\n    // opsForHash\n    // opsForZSet\n    // opsForGeo\n    // opsForHyperLog\n\n    // 除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和基本的CRUD\n\n    // 获取连接对象\n    //RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();\n    //connection.flushDb();\n    //connection.flushAll();\n\n    redisTemplate.opsForValue().set(&quot;mykey&quot;,&quot;kuangshen&quot;);\n    System.out.println(redisTemplate.opsForValue().get(&quot;mykey&quot;));\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("4.测试结果")]),s._v(" "),a("p",[s._v("此时我们回到Redis查看数据时候，惊奇发现全是乱码，可是程序中可以正常输出。这时候就关系到存储对象的序列化问题，在网络中传输的对象也是一样需要序列化，否者就全是乱码。")]),s._v(" "),a("p",[s._v("RedisTemplate内部的序列化配置是这样的")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513214746506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e59ab7b.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("默认的序列化器是采用JDK序列化器")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Atomy5011/blog-picture/blob/master/%E7%8B%82%E7%A5%9E%E8%AF%B4Redis%E7%AC%94%E8%AE%B0.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/15/62a940b9cecef.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("后续我们定制RedisTemplate就可以对其进行修改。")]),s._v(" "),a("p",[s._v("RedisSerializer提供了多种序列化方案：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513214818682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e5d78de.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("我们来编写一个自己的 RedisTemplete")]),s._v(" "),a("p",[s._v("import com.fasterxml.jackson.annotation.JsonAutoDetect;")]),s._v(" "),a("p",[s._v("import com.fasterxml.jackson.annotation.PropertyAccessor;")]),s._v(" "),a("p",[s._v("import com.fasterxml.jackson.databind.ObjectMapper;")]),s._v(" "),a("p",[s._v("import org.springframework.context.annotation.Bean;")]),s._v(" "),a("p",[s._v("import org.springframework.context.annotation.Configuration;")]),s._v(" "),a("p",[s._v("import org.springframework.data.redis.connection.RedisConnectionFactory;")]),s._v(" "),a("p",[s._v("import org.springframework.data.redis.core.RedisTemplate;")]),s._v(" "),a("p",[s._v("import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;")]),s._v(" "),a("p",[s._v("import org.springframework.data.redis.serializer.StringRedisSerializer;")]),s._v(" "),a("p",[s._v("@Configuration")]),s._v(" "),a("p",[s._v("publicclass RedisConfig {")]),s._v(" "),a("p",[s._v("// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用！")]),s._v(" "),a("p",[s._v("// 自己定义了一个 RedisTemplate")]),s._v(" "),a("p",[s._v("@Bean")]),s._v(" "),a("p",[s._v('@SuppressWarnings("all")')]),s._v(" "),a("p",[s._v("public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {")]),s._v(" "),a("p",[s._v("// 我们为了自己开发方便，一般直接使用 <String, Object>")]),s._v(" "),a("p",[s._v("​        RedisTemplate<String, Object> template = new RedisTemplate<String,")]),s._v(" "),a("p",[s._v("Object>();")]),s._v(" "),a("p",[s._v("​        template.setConnectionFactory(factory);")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    // Json序列化配置\n    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new\n    Jackson2JsonRedisSerializer(Object.class);\n    ObjectMapper om = new ObjectMapper();\n    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n    jackson2JsonRedisSerializer.setObjectMapper(om);\n    // String 的序列化\n    StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n\n    // key采用String的序列化方式\n    template.setKeySerializer(stringRedisSerializer);\n    // hash的key也采用String的序列化方式\n    template.setHashKeySerializer(stringRedisSerializer);\n    // value序列化方式采用jackson\n    template.setValueSerializer(jackson2JsonRedisSerializer);\n    // hash的value序列化方式采用jackson\n    template.setHashValueSerializer(jackson2JsonRedisSerializer);\n    template.afterPropertiesSet();\n\n    return template;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("所有的redis操作，其实对于java开发人员来说，十分的简单，更重要是要去理解redis的思想和每一种数据结构的用处和作用场景！")]),s._v(" "),a("h1",{attrs:{id:"八、redis-conf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、redis-conf"}},[s._v("#")]),s._v(" 八、Redis.conf")]),s._v(" "),a("h2",{attrs:{id:"容量单位不区分大小写-g和gb有区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容量单位不区分大小写-g和gb有区别"}},[s._v("#")]),s._v(" 容量单位不区分大小写，G和GB有区别")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Atomy5011/blog-picture/blob/master/%E7%8B%82%E7%A5%9E%E8%AF%B4Redis%E7%AC%94%E8%AE%B002.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/15/62a940ba4eb8b.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"可以使用-include-组合多个配置问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可以使用-include-组合多个配置问题"}},[s._v("#")]),s._v(" 可以使用 include 组合多个配置问题")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Atomy5011/blog-picture/blob/master/%E7%8B%82%E7%A5%9E%E8%AF%B4Redis%E7%AC%94%E8%AE%B003.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/15/62a940ba884ca.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"网络配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络配置"}},[s._v("#")]),s._v(" 网络配置")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513214912813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e6260fb.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[s._v("#")]),s._v(" 日志")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 日志\n# Specify the server verbosity level.\n# This can be one of:\n# debug (a lot of information, useful for development/testing)\n# verbose (many rarely useful info, but not a mess like the debug level)\n# notice (moderately verbose, what you want in production probably) 生产环境\n# warning (only very important / critical messages are logged)\nloglevel notice\nlogfile "" # 日志的文件位置名\ndatabases 16 # 数据库的数量，默认是 16 个数据库\nalways-show-logo yes # 是否总是显示LOGO\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("blockquote",[a("p",[s._v("日志输出级别")]),s._v(" "),a("blockquote",[a("p",[s._v("debug\nverbose\nnotice\nwaring")])])]),s._v(" "),a("h2",{attrs:{id:"持久化规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持久化规则"}},[s._v("#")]),s._v(" 持久化规则")]),s._v(" "),a("p",[s._v("持久化， 在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb. aof redis 是内存数据库，如果没有持久化，那么数据断电及失！")]),s._v(" "),a("p",[s._v("由于Redis是基于内存的数据库，需要将数据由内存持久化到文件中")]),s._v(" "),a("p",[s._v("持久化方式：")]),s._v(" "),a("p",[s._v("RDB\nAOF")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作\nsave 900 1\n# 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作\nsave 300 10\n# 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作\nsave 60 10000\n# 我们之后学习持久化，会自己定义这个测试！\nstop-writes-on-bgsave-error yes # 持久化如果出错，是否还需要继续工作！\nrdbcompression yes # 是否压缩 rdb 文件，需要消耗一些cpu资源！\nrdbchecksum yes # 保存rdb文件的时候，进行错误的检查校验！\ndir ./ # rdb 文件保存的目录！\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"security-安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#security-安全"}},[s._v("#")]),s._v(" SECURITY 安全")]),s._v(" "),a("p",[s._v("可以在这里设置redis的密码，默认是没有密码！")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('127.0.0.1:6379> ping\nPONG\n127.0.0.1:6379> config get requirepass # 获取redis的密码\n1) "requirepass"\n2) ""\n127.0.0.1:6379> config set requirepass "123456" # 设置redis的密码\nOK\n127.0.0.1:6379> config get requirepass # 发现所有的命令都没有权限了\n(error) NOAUTH Authentication required.\n127.0.0.1:6379> ping\n(error) NOAUTH Authentication required.\n127.0.0.1:6379> auth 123456 # 使用密码进行登录！\nOK\n127.0.0.1:6379> config get requirepass\n1) "requirepass"\n2) "123456"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"限制-clients-客户端连接相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限制-clients-客户端连接相关"}},[s._v("#")]),s._v(" 限制 CLIENTS（客户端连接相关）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("maxclients 10000 # 设置能连接上redis的最大客户端的数量\nmaxmemory <bytes> # redis 配置最大的内存容量\nmaxmemory-policy noeviction # 内存到达上限之后的处理策略\n1、volatile-lru：只对设置了过期时间的key进行LRU（默认值）\n2、allkeys-lru ： 删除lru算法的key\n3、volatile-random：随机删除即将过期key\n4、allkeys-random：随机删除\n5、volatile-ttl ： 删除即将过期的\n6、noeviction ： 永不过期，返回错误\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"append-only-模式-aof配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#append-only-模式-aof配置"}},[s._v("#")]),s._v(" APPEND ONLY 模式 aof配置")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('appendonly no # 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，\nrdb完全够用！\nappendfilename "appendonly.aof" # 持久化的文件的名字\n# appendfsync always # 每次修改都会 sync。消耗性能\nappendfsync everysec # 每秒执行一次 sync，可能会丢失这1s的数据！\n# appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h1",{attrs:{id:"九、redis持久化-rdb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、redis持久化-rdb"}},[s._v("#")]),s._v(" 九、Redis持久化——RDB")]),s._v(" "),a("p",[s._v("面试和工作，持久化都是重点！\nRedis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！")]),s._v(" "),a("h2",{attrs:{id:"什么是rdb-redis-database"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是rdb-redis-database"}},[s._v("#")]),s._v(" 什么是RDB（Redis DataBase）")]),s._v(" "),a("blockquote",[a("p",[s._v("在指定时间间隔后，将内存中的数据集快照写入数据库 ；在恢复时候，直接读取快照文件，进行数据的恢复 ；\n默认情况下， Redis 将数据库快照保存在名字为 dump.rdb的二进制文件中。文件名可以在配置文件中进行自定义。")])]),s._v(" "),a("p",[s._v("在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。\nRedis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。\n这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置！ 有时候在生产环境我们会将这个文件进行备份！\nrdb保存的文件是dump.rdb 都是在我们的配置文件中快照中进行配置的！")]),s._v(" "),a("h2",{attrs:{id:"工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[s._v("#")]),s._v(" 工作原理")]),s._v(" "),a("p",[s._v("在进行 RDB 的时候，redis 的主线程是不会做 io 操作的，主线程会 fork 一个子线程来完成该操作；")]),s._v(" "),a("ol",[a("li",[s._v("Redis 调用forks。同时拥有父进程和子进程。")]),s._v(" "),a("li",[s._v("子进程将数据集写入到一个临时 RDB 文件中。")]),s._v(" "),a("li",[s._v("当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。")])]),s._v(" "),a("p",[s._v("这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益(因为是使用子进程进行写操作，而父进程依然可以接收来自客户端的请求。)")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Atomy5011/blog-picture/blob/master/%E7%8B%82%E7%A5%9E%E8%AF%B4Redis%E7%AC%94%E8%AE%B004.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/15/62a940baf102e.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"触发机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#触发机制"}},[s._v("#")]),s._v(" 触发机制")]),s._v(" "),a("ol",[a("li",[s._v("save的规则满足的情况下，会自动触发rdb原则")]),s._v(" "),a("li",[s._v("执行flushall命令，也会触发我们的rdb原则")]),s._v(" "),a("li",[s._v("退出redis，也会自动产生rdb文件")])]),s._v(" "),a("h3",{attrs:{id:"save"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#save"}},[s._v("#")]),s._v(" save")]),s._v(" "),a("p",[s._v("使用 save 命令，会立刻对当前内存中的数据进行持久化 ,但是会阻塞，也就是不接受其他操作了；")]),s._v(" "),a("blockquote",[a("p",[s._v("由于 save 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，save命令执行速度会非常慢，阻塞所有客户端的请求。")])]),s._v(" "),a("p",[s._v("示意图")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215150892.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e65c43b.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"flushall命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flushall命令"}},[s._v("#")]),s._v(" flushall命令")]),s._v(" "),a("p",[s._v("flushall 命令也会触发持久化 ；")]),s._v(" "),a("p",[s._v("触发持久化规则\n满足配置条件中的触发条件 ；")]),s._v(" "),a("blockquote",[a("p",[s._v("可以通过配置文件对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动进行数据集保存操作。")])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215205970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e697b4f.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215220858.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e6c7e72.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"bgsave"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bgsave"}},[s._v("#")]),s._v(" bgsave")]),s._v(" "),a("p",[s._v("bgsave 是异步进行，进行持久化的时候，redis 还可以将继续响应客户端请求 ；")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/2020051321523151.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e710759.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("bgsave和save对比")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[s._v("命令")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("save")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("bgsave")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("IO类型")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("同步")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("异步")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("阻塞？")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("是")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("是（阻塞发生在fock()，通常非常快）")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("复杂度")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("O(n)")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("O(n)")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("优点")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("不会消耗额外的内存")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("不阻塞客户端命令")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("缺点")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("阻塞客户端命令")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("需要fock子进程，消耗内存")])])])]),s._v(" "),a("h2",{attrs:{id:"如果恢复rdb文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果恢复rdb文件"}},[s._v("#")]),s._v(" 如果恢复rdb文件！")]),s._v(" "),a("p",[s._v("1、只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump.rdb 恢复其中的数据！\n2、查看需要存在的位置")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('127.0.0.1:6379> config get dir\n1) "dir"\n2) "/usr/local/bin" # 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[s._v("#")]),s._v(" 优缺点")]),s._v(" "),a("blockquote",[a("p",[s._v("优点：")])]),s._v(" "),a("ol",[a("li",[s._v("适合大规模的数据恢复")]),s._v(" "),a("li",[s._v("对数据的完整性要求不高")])]),s._v(" "),a("blockquote",[a("p",[s._v("缺点：")])]),s._v(" "),a("ol",[a("li",[s._v("需要一定的时间间隔进行操作，如果redis意外宕机了，这个最后一次修改的数据就没有了。")]),s._v(" "),a("li",[s._v("fork进程的时候，会占用一定的内容空间。")])]),s._v(" "),a("h1",{attrs:{id:"十、redis持久化-aof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、redis持久化-aof"}},[s._v("#")]),s._v(" 十、Redis持久化——AOF")]),s._v(" "),a("p",[s._v("Append Only File")]),s._v(" "),a("p",[s._v("将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Atomy5011/blog-picture/blob/master/%E7%8B%82%E7%A5%9E%E8%AF%B4Redis%E7%AC%94%E8%AE%B005.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/15/62a940bc38ac5.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。")]),s._v(" "),a("h2",{attrs:{id:"什么是aof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是aof"}},[s._v("#")]),s._v(" 什么是AOF")]),s._v(" "),a("p",[s._v("快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、以及未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。")]),s._v(" "),a("p",[s._v("appendonly no yes则表示启用AOF")]),s._v(" "),a("p",[s._v("默认是不开启的，我们需要手动配置，然后重启redis，就可以生效了！")]),s._v(" "),a("p",[s._v("如果这个aof文件有错位，这时候redis是启动不起来的，我需要修改这个aof文件")]),s._v(" "),a("p",[s._v("redis给我们提供了一个工具redis-check-aof --fix")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('appendonly yes  # 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分的情况下，rdb完全够用\nappendfilename "appendonly.aof"\nappendfsync always # 每次修改都会sync 消耗性能\nappendfsync everysec # 每秒执行一次 sync 可能会丢失这一秒的数据\nappendfsync no # 不执行 sync ,这时候操作系统自己同步数据，速度最快\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"优缺点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-2"}},[s._v("#")]),s._v(" 优缺点")]),s._v(" "),a("p",[s._v("优点")]),s._v(" "),a("ol",[a("li",[s._v("每一次修改都会同步，文件的完整性会更加好")]),s._v(" "),a("li",[s._v("没秒同步一次，可能会丢失一秒的数据")]),s._v(" "),a("li",[s._v("从不同步，效率最高")])]),s._v(" "),a("p",[s._v("缺点")]),s._v(" "),a("ol",[a("li",[s._v("相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢！")]),s._v(" "),a("li",[s._v("Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化")])]),s._v(" "),a("h2",{attrs:{id:"扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[s._v("#")]),s._v(" 扩展：")]),s._v(" "),a("p",[s._v("1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储\n2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。\n3、只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化\n4、同时开启两种持久化方式")]),s._v(" "),a("ul",[a("li",[s._v("在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。")]),s._v(" "),a("li",[s._v("RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。")])]),s._v(" "),a("p",[s._v("5、性能建议")]),s._v(" "),a("ul",[a("li",[s._v("因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。")]),s._v(" "),a("li",[s._v("如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。")]),s._v(" "),a("li",[s._v("如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。")])]),s._v(" "),a("h2",{attrs:{id:"如何选择使用哪种持久化方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何选择使用哪种持久化方式"}},[s._v("#")]),s._v(" 如何选择使用哪种持久化方式？")]),s._v(" "),a("p",[s._v("一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。")]),s._v(" "),a("p",[s._v("如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。")]),s._v(" "),a("p",[s._v("有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。")]),s._v(" "),a("h1",{attrs:{id:"十一、redis发布订阅"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十一、redis发布订阅"}},[s._v("#")]),s._v(" 十一、Redis发布订阅")]),s._v(" "),a("p",[s._v("Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。微信、 微博、关注系统！ Redis 客户端可以订阅任意数量的频道。 订阅/发布消息图： 第一个：消息发送者， 第二个：频道 第三个：消息订阅者！")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Atomy5011/blog-picture/blob/master/%E7%8B%82%E7%A5%9E%E8%AF%B4Redis%E7%AC%94%E8%AE%B006.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/15/62a940bc79870.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215523258.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e84ed4c.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/2020051321553483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e87c4f9.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[s._v("#")]),s._v(" 命令")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("PSUBSCRIBE pattern [pattern..]")]),s._v(" 订阅一个或多个符合给定模式的频道。")]),s._v(" "),a("li",[a("code",[s._v("PUNSUBSCRIBE pattern [pattern..]")]),s._v(" 退订一个或多个符合给定模式的频道。")]),s._v(" "),a("li",[a("code",[s._v("PUBSUB subcommand [argument[argument]]")]),s._v(" 查看订阅与发布系统状态。")]),s._v(" "),a("li",[a("code",[s._v("PUBLISH channel message")]),s._v(" 向指定频道发布消息")]),s._v(" "),a("li",[a("code",[s._v("SUBSCRIBE channel [channel..]")]),s._v(" 订阅给定的一个或多个频道。")]),s._v(" "),a("li",[a("code",[s._v("UNSUBSCRIBE channel [channel..]")]),s._v(" 退订一个或多个频道")])]),s._v(" "),a("p",[s._v("代码示例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('------------订阅端----------------------\n127.0.0.1:6379> SUBSCRIBE sakura # 订阅sakura频道\nReading messages... (press Ctrl-C to quit) # 等待接收消息\n1) "subscribe" # 订阅成功的消息\n2) "sakura"\n3) (integer) 1\n1) "message" # 接收到来自sakura频道的消息 "hello world"\n2) "sakura"\n3) "hello world"\n1) "message" # 接收到来自sakura频道的消息 "hello i am sakura"\n2) "sakura"\n3) "hello i am sakura"\n--------------消息发布端-------------------\n127.0.0.1:6379> PUBLISH sakura "hello world" # 发布消息到sakura频道\n(integer) 1\n127.0.0.1:6379> PUBLISH sakura "hello i am sakura" # 发布消息\n(integer) 1\n-----------------查看活跃的频道------------\n127.0.0.1:6379> PUBSUB channels\n\n"sakura"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h2",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[s._v("#")]),s._v(" 原理")]),s._v(" "),a("p",[s._v("Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解。")]),s._v(" "),a("p",[s._v("Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。")]),s._v(" "),a("p",[s._v("每个 Redis 服务器进程都维持着一个表示服务器状态的 redis.h/redisServer 结构， 结构的 pubsub_channels 属性是一个字典， 这个字典就用于保存订阅频道的信息，其中，字典的键为正在被订阅的频道， 而字典的值则是一个链表， 链表中保存了所有订阅这个频道的客户端。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/2020051321554964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e8a91e3.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("客户端订阅，就被链接到对应频道的链表的尾部，退订则就是将客户端节点从链表中移除。")]),s._v(" "),a("h2",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ol",[a("li",[s._v("如果一个客户端订阅了频道，但自己读取消息的速度却不够快的话，那么不断积压的消息会使redis输出缓冲区的体积变得越来越大，这可能使得redis本身的速度变慢，甚至直接崩溃。")]),s._v(" "),a("li",[s._v("这和数据传输可靠性有关，如果在订阅方断线，那么他将会丢失所有在短线期间发布者发布的消息。")])]),s._v(" "),a("h2",{attrs:{id:"应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[s._v("#")]),s._v(" 应用")]),s._v(" "),a("ol",[a("li",[s._v("消息订阅：公众号订阅，微博关注等等（起始更多是使用消息队列来进行实现）")]),s._v(" "),a("li",[s._v("多人在线聊天室。")])]),s._v(" "),a("p",[s._v("稍微复杂的场景，我们就会使用消息中间件MQ处理。")]),s._v(" "),a("h1",{attrs:{id:"十二、redis主从复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十二、redis主从复制"}},[s._v("#")]),s._v(" 十二、Redis主从复制")]),s._v(" "),a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("p",[s._v("主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（Master/Leader）,后者称为从节点（Slave/Follower）， 数据的复制是单向的！只能由主节点复制到从节点（主节点以写为主、从节点以读为主）。")]),s._v(" "),a("p",[s._v("默认情况下，每台Redis服务器都是主节点，一个主节点可以有0个或者多个从节点，但每个从节点只能由一个主节点。")]),s._v(" "),a("h2",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[s._v("#")]),s._v(" 作用")]),s._v(" "),a("ol",[a("li",[s._v("数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余的方式。")]),s._v(" "),a("li",[s._v("故障恢复：当主节点故障时，从节点可以暂时替代主节点提供服务，是一种服务冗余的方式")]),s._v(" "),a("li",[s._v("负载均衡：在主从复制的基础上，配合读写分离，由主节点进行写操作，从节点进行读操作，分担服务器的负载；尤其是在多读少写的场景下，通过多个从节点分担负载，提高并发量。")]),s._v(" "),a("li",[s._v("高可用基石：主从复制还是哨兵和集群能够实施的基础。")])]),s._v(" "),a("h2",{attrs:{id:"为什么使用集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用集群"}},[s._v("#")]),s._v(" 为什么使用集群")]),s._v(" "),a("p",[s._v("一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机），原因如下：")]),s._v(" "),a("p",[s._v("1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；")]),s._v(" "),a("p",[s._v("2、从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。")]),s._v(" "),a("p",[s._v('电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是"多读少写"。')]),s._v(" "),a("p",[s._v("对于这种场景，我们可以使如下这种架构：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Atomy5011/blog-picture/blob/master/%E7%8B%82%E7%A5%9E%E8%AF%B4Redis%E7%AC%94%E8%AE%B007.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/15/62a940bd34928.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主二从！")]),s._v(" "),a("p",[s._v("只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用Redis！")]),s._v(" "),a("p",[a("strong",[s._v("总结")])]),s._v(" "),a("ol",[a("li",[s._v("单台服务器难以负载大量的请求")]),s._v(" "),a("li",[s._v("单台服务器故障率高，系统崩坏概率大")]),s._v(" "),a("li",[s._v("单台服务器内存容量有限。")])]),s._v(" "),a("h2",{attrs:{id:"环境配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境配置"}},[s._v("#")]),s._v(" 环境配置")]),s._v(" "),a("p",[s._v("只配置从库，不用配置主库！")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6379> info replication\n# Replication\nrole:master # 角色\nconnected_slaves:0 # 从机数量\nmaster_replid:3b54deef5b7b7b7f7dd8acefa23be48879b4fcff\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:0\nsecond_repl_offset:-1\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("复制3个配置文件，然后修改对应的信息")]),s._v(" "),a("ol",[a("li",[s._v("端口")]),s._v(" "),a("li",[s._v("pid名字")]),s._v(" "),a("li",[s._v("log文件名")]),s._v(" "),a("li",[s._v("dump.rdb名字")])]),s._v(" "),a("p",[s._v("启动单机多服务集群：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215610163.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e8d7ade.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"一主二从配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一主二从配置"}},[s._v("#")]),s._v(" 一主二从配置")]),s._v(" "),a("p",[s._v("默认情况下，每台Redis服务器都是主节点；我们一般情况下只用配置从机就好了！")]),s._v(" "),a("p",[s._v("认老大！一主（79）二从（80，81）")]),s._v(" "),a("p",[s._v("使用SLAVEOF host port就可以为从机配置主机了。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215637483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e912d6a.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("说明")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("SLAVEOF host 6379")]),s._v(" 找谁当自己的老大！")]),s._v(" "),a("li",[a("code",[s._v("role:slave")]),s._v(" # 当前角色是从机")]),s._v(" "),a("li",[a("code",[s._v("master_host:127.0.0.1")]),s._v(" # 可以的看到主机的信息")])]),s._v(" "),a("p",[s._v("然后主机上也能看到从机的状态：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215645778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e945319.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("说明")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("connected_slaves:1")]),s._v(" # 多了从机的配置")]),s._v(" "),a("li",[a("code",[s._v("slave0:ip=127.0.0.1,port=6380,state=online,offset=42,lag=1")]),s._v(" # 多了从机的配置")])]),s._v(" "),a("p",[s._v("真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的！")]),s._v(" "),a("h2",{attrs:{id:"使用规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用规则"}},[s._v("#")]),s._v(" 使用规则")]),s._v(" "),a("p",[s._v("1.从机只能读，不能写，主机可读可写但是多用于写。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("127.0.0.1:6381> set name sakura # 从机6381写入失败\n(error) READONLY You can't write against a read only replica.\n127.0.0.1:6380> set name sakura # 从机6380写入失败\n(error) READONLY You can't write against a read only replica.\n127.0.0.1:6379> set name sakura\nOK\n127.0.0.1:6379> get name\n\"sakura\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("2.当主机断电宕机后，默认情况下从机的角色不会发生变化 ，集群中只是失去了写操作，当主机恢复以后，又会连接上从机恢复原状。")]),s._v(" "),a("p",[s._v("3.当从机断电宕机后，若不是使用配置文件配置的从机，再次启动后作为主机是无法获取之前主机的数据的，若此时重新配置称为从机，又可以获取到主机的所有数据。这里就要提到一个同步原理。")]),s._v(" "),a("p",[s._v("4.第二条中提到，默认情况下，主机故障后，不会出现新的主机，有两种方式可以产生新的主机：")]),s._v(" "),a("ul",[a("li",[s._v("从机手动执行命令slaveof no one,这样执行以后从机会独立出来成为一个主机")]),s._v(" "),a("li",[s._v("使用哨兵模式（自动选举）")])]),s._v(" "),a("blockquote",[a("p",[s._v("如果没有老大了，这个时候能不能选择出来一个老大呢？手动！")])]),s._v(" "),a("p",[s._v("如果主机断开了连接，我们可以使用"),a("code",[s._v("SLAVEOF no one")]),s._v("让自己变成主机！其他的节点就可以手动连接到最新的主节点（手动）！如果这个时候老大修复了，那么就重新连接！")]),s._v(" "),a("h2",{attrs:{id:"复制原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制原理"}},[s._v("#")]),s._v(" 复制原理")]),s._v(" "),a("p",[s._v("Slave 启动成功连接到 master 后会发送一个sync同步命令")]),s._v(" "),a("p",[s._v("Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。")]),s._v(" "),a("p",[a("strong",[s._v("全量复制")]),s._v("：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。")]),s._v(" "),a("p",[a("strong",[s._v("增量复制")]),s._v("：Master 继续将新的所有收集到的修改命令依次传给slave，完成同步")]),s._v(" "),a("p",[s._v("但是只要是重新连接master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中看到！")]),s._v(" "),a("h1",{attrs:{id:"十三、哨兵模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十三、哨兵模式"}},[s._v("#")]),s._v(" 十三、哨兵模式")]),s._v(" "),a("p",[s._v("（自动选举老大的模式）")]),s._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel（哨兵） 架构来解决这个问题。"),a("strong",[s._v("能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。")])]),s._v(" "),a("p",[s._v("哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Atomy5011/blog-picture/blob/master/%E7%8B%82%E7%A5%9E%E8%AF%B4Redis%E7%AC%94%E8%AE%B008.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/15/62a940bdf1fcf.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("哨兵的作用：")]),s._v(" "),a("ul",[a("li",[s._v("通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。")]),s._v(" "),a("li",[s._v("当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。")])]),s._v(" "),a("p",[s._v("然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了"),a("strong",[s._v("多哨兵模式")]),s._v("。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Atomy5011/blog-picture/blob/master/%E7%8B%82%E7%A5%9E%E8%AF%B4Redis%E7%AC%94%E8%AE%B009.jpg?raw=true",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/15/62a940be400b9.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为"),a("strong",[s._v("客观下线")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[s._v("#")]),s._v(" 测试")]),s._v(" "),a("p",[s._v("1、配置哨兵配置文件 sentinel.conf")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# sentinel monitor 被监控的名称 host port 1\nsentinel monitor myredis 127.0.0.1 6379 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("后面的这个数字1，代表主机挂了，slave投票看让谁接替成为主机，票数最多的，就会成为主机！")]),s._v(" "),a("p",[s._v("2、启动哨兵！")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215752444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e97e72c.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("3、此时哨兵监视着我们的主机6379，当我们断开主机后：")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215806972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e9b9235.png",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"哨兵模式优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哨兵模式优缺点"}},[s._v("#")]),s._v(" 哨兵模式优缺点")]),s._v(" "),a("p",[s._v("​\t\t优点：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("哨兵集群，基于主从复制模式，所有主从复制的优点，它都有")])]),s._v(" "),a("li",[a("p",[s._v("主从可以切换，故障可以转移，系统的可用性更好")])]),s._v(" "),a("li",[a("p",[s._v("哨兵模式是主从模式的升级，手动到自动，更加健壮")]),s._v(" "),a("p",[s._v("缺点：")])]),s._v(" "),a("li",[a("p",[s._v("Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦")])]),s._v(" "),a("li",[a("p",[s._v("实现哨兵模式的配置其实是很麻烦的，里面有很多配置项")])])]),s._v(" "),a("h2",{attrs:{id:"哨兵模式的全部配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哨兵模式的全部配置"}},[s._v("#")]),s._v(" 哨兵模式的全部配置")]),s._v(" "),a("p",[s._v("完整的哨兵模式配置文件 sentinel.conf")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Example sentinel.conf")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#哨兵sentinel实例运行的端口 默认26379")]),s._v("\nport "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("26379")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#哨兵sentinel的工作目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dir")]),s._v(" /tmp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#哨兵sentinel监控的redis主节点的 ip port")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了")]),s._v("\nsentinel monitor "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("master-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ip"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("redis-port"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("quorum"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nsentinel monitor mymaster "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码")]),s._v("\nsentinel auth-pass "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("master-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("password"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nsentinel auth-pass mymaster MySUPER--secret-0123passw0rd\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒")]),s._v("\nsentinel down-after-milliseconds "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("master-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("milliseconds"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nsentinel down-after-milliseconds mymaster "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30000")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这个数字越小，完成failover所需的时间就越长，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。")]),s._v("\nsentinel parallel-syncs "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("master-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("numslaves"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nsentinel parallel-syncs mymaster "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#故障转移的超时时间 failover-timeout 可以用在以下这些方面：")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1. 同一个sentinel对同一个master两次failover之间的间隔时间。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#3.当想要取消一个正在进行的failover所需要的时间。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#默认三分钟")]),s._v("\nsentinel failover-timeout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("master-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("milliseconds"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nsentinel failover-timeout mymaster "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("180000")]),s._v("\nSCRIPTS EXECUTION\n\n配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。\n对于脚本的运行结果有以下规则：\n若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10\n若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。\n如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。\n一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。\n通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，\n这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，\n一个是事件的类型，\n一个是事件的描述。\n如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#通知脚本")]),s._v("\nsentinel notification-script "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("master-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("script-path"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nsentinel notification-script mymaster /var/redis/notify.sh\n客户端重新配置主节点参数脚本\n当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。\n以下参数将会在调用脚本时传给脚本:\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("master-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("role"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("state"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("from-ip"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("from-port"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("to-ip"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("to-port"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n目前"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("state"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("总是“failover”,\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("role"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("是“leader”或者“observer”中的一个。\n参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("即旧的slave"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("通信的\n这个脚本应该是通用的，能被多次调用，不是针对性的。\n\nsentinel client-reconfig-script "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("master-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("script-path"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nsentinel client-reconfig-script mymaster /var/redis/reconfig.sh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br")])]),a("h1",{attrs:{id:"十四、缓存穿透与雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十四、缓存穿透与雪崩"}},[s._v("#")]),s._v(" 十四、缓存穿透与雪崩")]),s._v(" "),a("h2",{attrs:{id:"缓存穿透-即查询不到"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透-即查询不到"}},[s._v("#")]),s._v(" 缓存穿透（即查询不到）")]),s._v(" "),a("h3",{attrs:{id:"概念-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念-2"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("p",[s._v("在默认情况下，用户请求数据时，会先在缓存(Redis)中查找，若没找到即缓存未命中，再在数据库中进行查找，数量少可能问题不大，可是一旦大量的请求数据（例如秒杀场景）缓存都没有命中的话，就会全部转移到数据库上，造成数据库极大的压力，就有可能导致数据库崩溃。网络安全中也有人恶意使用这种手段进行攻击被称为洪水攻击。")]),s._v(" "),a("h3",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[s._v("#")]),s._v(" 解决方案")]),s._v(" "),a("p",[a("strong",[s._v("布隆过滤器")])]),s._v(" "),a("p",[s._v("对所有可能查询的参数以Hash的形式存储，以便快速确定是否存在这个值，在控制层先进行拦截校验，校验不通过直接打回，减轻了存储系统的压力。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215824722.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0e9f286a.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("缓存空对象")])]),s._v(" "),a("p",[s._v("一次请求若在缓存和数据库中都没找到，就在缓存中方一个空对象用于处理后续这个请求。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215836317.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0ea32867.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("这样做有一个缺陷：存储空对象也需要空间，大量的空对象会耗费一定的空间，存储效率并不高。解决这个缺陷的方式就是设置较短过期时间")]),s._v(" "),a("p",[s._v("即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。")]),s._v(" "),a("h2",{attrs:{id:"缓存击穿-即量太大-缓存过期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿-即量太大-缓存过期"}},[s._v("#")]),s._v(" 缓存击穿（即量太大，缓存过期）")]),s._v(" "),a("h3",{attrs:{id:"概念-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念-3"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("p",[s._v("相较于缓存穿透，缓存击穿的目的性更强，一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。这就是缓存被击穿，只是针对其中某个key的缓存不可用而导致击穿，但是其他的key依然可以使用缓存响应。")]),s._v(" "),a("p",[s._v("比如热搜排行上，一个热点新闻被同时大量访问就可能导致缓存击穿。")]),s._v(" "),a("h3",{attrs:{id:"解决方案-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-2"}},[s._v("#")]),s._v(" 解决方案")]),s._v(" "),a("p",[s._v("1.设置热点数据永不过期")]),s._v(" "),a("p",[s._v("这样就不会出现热点数据过期的情况，但是当Redis内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。")]),s._v(" "),a("p",[s._v("2.加互斥锁(分布式锁)")]),s._v(" "),a("p",[s._v("在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。")]),s._v(" "),a("h2",{attrs:{id:"缓存雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[s._v("#")]),s._v(" 缓存雪崩")]),s._v(" "),a("h3",{attrs:{id:"概念-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念-4"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("p",[s._v("大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。")]),s._v(" "),a("p",[s._v("缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机！")]),s._v(" "),a("p",[s._v("产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://img-blog.csdnimg.cn/20200513215850428.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MzIyNw==,size_16,color_FFFFFF,t_70",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://image.aomtop.com/i/2022/06/13/62a6b0ea67065.jpg",alt:"img"}}),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。")]),s._v(" "),a("h3",{attrs:{id:"解决方案-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-3"}},[s._v("#")]),s._v(" 解决方案")]),s._v(" "),a("blockquote",[a("p",[s._v("redis高可用")])]),s._v(" "),a("p",[s._v("这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群")]),s._v(" "),a("blockquote",[a("p",[s._v("限流降级")])]),s._v(" "),a("p",[s._v("这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。")]),s._v(" "),a("blockquote",[a("p",[s._v("数据预热")])]),s._v(" "),a("p",[s._v("数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。")]),s._v(" "),a("h1",{attrs:{id:"redis-一主两从三哨兵模式搭建-记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-一主两从三哨兵模式搭建-记录"}},[s._v("#")]),s._v(" redis(一主两从三哨兵模式搭建)记录")]),s._v(" "),a("p",[s._v("**redis(**"),a("strong",[s._v("一主两从三哨兵模式搭建)记录")])]),s._v(" "),a("p",[a("strong",[s._v("目的:")])]),s._v(" "),a("p",[s._v("让看看这篇文章的的人能够知道：软件架构、软件的安装、配置、基本运维的操作、高可用测试、也包含我自己，能够节省对应的时间。")]),s._v(" "),a("p",[a("strong",[s._v("软件架构：")])]),s._v(" "),a("p",[s._v("生产环境使用三台服务器搭建redis哨兵集群，3个redis实例（1主2从）+ 3个哨兵实例。生产环境能够保证在哨兵存活两台的情况下，只有一台redis能够继续提供服务（一主两从三哨兵）")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[s._v("主虚拟机1")])]),s._v(" "),a("th",[a("strong",[s._v("从虚拟机2")])]),s._v(" "),a("th",[a("strong",[s._v("从虚拟机3")])])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("192.168.200.211")]),s._v(" "),a("td",[s._v("192.168.200.212")]),s._v(" "),a("td",[s._v("192.168.200.213")])])])]),s._v(" "),a("p",[a("strong",[s._v("软件安装：分别在三台机器上通过yum进行redis的下载和安装以及开机启动")])]),s._v(" "),a("p",[s._v("# 添加软件安装源")]),s._v(" "),a("p",[s._v("yum install epel-release")]),s._v(" "),a("p",[s._v("# 安装redis")]),s._v(" "),a("p",[s._v("yum install redis -y")]),s._v(" "),a("p",[s._v("# 启动redis、启动redis哨兵")]),s._v(" "),a("p",[s._v("systemctl start redis")]),s._v(" "),a("p",[s._v("systemctl start redis-sentinel")]),s._v(" "),a("p",[s._v("# 允许开机启动")]),s._v(" "),a("p",[s._v("systemctl enable redis")]),s._v(" "),a("p",[s._v("systemctl enable redis-sentinel")]),s._v(" "),a("p",[s._v("# 之后进行配置修改：为哨兵集群，重启启动服务")]),s._v(" "),a("p",[a("strong",[s._v("/etc/redis.conf")]),s._v("**（主库配置）**")]),s._v(" "),a("p",[s._v("# 修改redis配置文件：/etc/redis.conf")]),s._v(" "),a("p",[s._v("# 1. 修改绑定ip为服务器内网ip地址，做绑定，三台各自填写各自的ip地址")]),s._v(" "),a("p",[s._v("bind 192.168.200.211")]),s._v(" "),a("p",[s._v("# 2. 保护模式修改为否，允许远程连接")]),s._v(" "),a("p",[s._v("protected-mode no")]),s._v(" "),a("p",[s._v("# 4. 设定密码")]),s._v(" "),a("p",[s._v('requirepass "123456789"')]),s._v(" "),a("p",[s._v("# 5. 设定主库密码与当前库密码同步，保证从库能够提升为主库")]),s._v(" "),a("p",[s._v('masterauth "123456789"')]),s._v(" "),a("p",[s._v("# 6. 打开AOF持久化支持")]),s._v(" "),a("p",[s._v("appendonly yes")]),s._v(" "),a("p",[a("strong",[s._v("/etc/redis.conf")]),s._v("**（两个从库配置）**")]),s._v(" "),a("p",[s._v("基本配置和主库相同，bindip地址各自对应各自的。\n需要添加主库同步配置")]),s._v(" "),a("p",[s._v("# 主库为主虚拟机1的地址")]),s._v(" "),a("p",[s._v("slaveof 192.168.200.211 6379")]),s._v(" "),a("p",[a("strong",[s._v("/etc/redis-sentinel.conf")]),s._v("**（哨兵配置）**")]),s._v(" "),a("p",[s._v("# 修改redis-sentinel配置文件：/etc/redis-sentinel.conf")]),s._v(" "),a("p",[s._v("# 1. 绑定的地址")]),s._v(" "),a("p",[s._v("bind 172.19.131.247")]),s._v(" "),a("p",[s._v("# 2. 保护模式修改为否，允许远程连接")]),s._v(" "),a("p",[s._v("protected-mode no")]),s._v(" "),a("p",[s._v("# 3. 设定sentinel myid 每个都不一样,使用yum安装的时候，直接就生成了")]),s._v(" "),a("p",[s._v("sentinel myid 04d9d3fef5508f60498ac014388571e719188527")]),s._v(" "),a("p",[s._v("# 4. 设定监控地址，为对应的主redis库的内网地址")]),s._v(" "),a("p",[s._v("sentinel monitor mymaster 192.168.200.211 6379 2")]),s._v(" "),a("p",[s._v("# 5. 设定5秒内没有响应，说明服务器挂了,需要将配置放在sentinel monitor master 127.0.0.1 6379 1下面")]),s._v(" "),a("p",[s._v("sentinel down-after-milliseconds mymaster 5000")]),s._v(" "),a("p",[s._v("# 6. 设定15秒内master没有活起来，就重新选举主")]),s._v(" "),a("p",[s._v("sentinel failover-timeout mymaster 15000")]),s._v(" "),a("p",[s._v("# 7. 表示如果master重新选出来后，其它slave节点能同时并行从新master同步缓存的台数有多少个，显然该值越大，所有slave节点完成同步切换的整体速度越快，但如果此时正好有人在访问这些slave，可能造成读取失败，影响面会更广。最保定的设置为1，只同一时间，只能有一台干这件事，这样其它slave还能继续服务，但是所有slave全部完成缓存更新同步的进程将变慢。")]),s._v(" "),a("p",[s._v("sentinel parallel-syncs mymaster 2")]),s._v(" "),a("p",[s._v("# 8. 主数据库密码,需要将配置放在sentinel monitor master 127.0.0.1 6379 1下面")]),s._v(" "),a("p",[s._v("sentinel auth-pass mymaster 123456789")]),s._v(" "),a("p",[s._v("注意：含有mymaster的配置，都必须放置在sentinel monitor mymaster 192.168.200.211 6379 2之后，否则会出现问题")]),s._v(" "),a("p",[a("strong",[s._v("3.")]),s._v(" "),a("strong",[s._v("重新启动")])]),s._v(" "),a("p",[s._v("# 启动需要按照Master->Slave->Sentinel的顺序进行启动")]),s._v(" "),a("p",[s._v("# 启动redis")]),s._v(" "),a("p",[s._v("systemctl restart redis")]),s._v(" "),a("p",[s._v("# 启动redis哨兵")]),s._v(" "),a("p",[s._v("systemctl restart redis-sentinel")]),s._v(" "),a("p",[a("strong",[s._v("高可用测试：")])]),s._v(" "),a("p",[a("strong",[s._v("1.")]),s._v(" "),a("strong",[s._v("连接redis脚本")])]),s._v(" "),a("p",[s._v("# 主虚拟机1")]),s._v(" "),a("p",[s._v("redis-cli -h 192.168.200.211 -p 6379 -a 123456789")]),s._v(" "),a("p",[s._v("# 从虚拟机2")]),s._v(" "),a("p",[s._v("redis-cli -h 192.168.200.212 -p 6379 -a 123456789")]),s._v(" "),a("p",[s._v("# 从虚拟机3")]),s._v(" "),a("p",[s._v("redis-cli -h 192.168.200.213 -p 6379 -a 123456789")]),s._v(" "),a("p",[a("strong",[s._v("2.")]),s._v(" "),a("strong",[s._v("同步状态查看")])]),s._v(" "),a("p",[s._v("# 连接完成后输入命令")]),s._v(" "),a("p",[s._v("info replication")]),s._v(" "),a("p",[s._v("# 主库显示如下，即可算完成（包含两个从库ip地址）")]),s._v(" "),a("p",[s._v("# Replication")]),s._v(" "),a("p",[s._v("role:master")]),s._v(" "),a("p",[s._v("connected_slaves:2")]),s._v(" "),a("p",[s._v("slave0:ip=192.168.200.213,port=6379,state=online,offset=188041,lag=1")]),s._v(" "),a("p",[s._v("slave1:ip=192.168.200.212,port=6379,state=online,offset=188041,lag=1")]),s._v(" "),a("p",[s._v("master_repl_offset:188041")]),s._v(" "),a("p",[s._v("repl_backlog_active:1")]),s._v(" "),a("p",[s._v("repl_backlog_size:1048576")]),s._v(" "),a("p",[s._v("repl_backlog_first_byte_offset:2")]),s._v(" "),a("p",[s._v("repl_backlog_histlen:188040")]),s._v(" "),a("p",[s._v("# 从库显示如下，即可算完成")]),s._v(" "),a("p",[s._v("# Replication")]),s._v(" "),a("p",[s._v("role:slave")]),s._v(" "),a("p",[s._v("master_host:192.168.200.211")]),s._v(" "),a("p",[s._v("master_port:6379")]),s._v(" "),a("p",[s._v("master_link_status:up")]),s._v(" "),a("p",[s._v("master_last_io_seconds_ago:1")]),s._v(" "),a("p",[s._v("master_sync_in_progress:0")]),s._v(" "),a("p",[s._v("slave_repl_offset:174548")]),s._v(" "),a("p",[s._v("slave_priority:100")]),s._v(" "),a("p",[s._v("slave_read_only:1")]),s._v(" "),a("p",[s._v("connected_slaves:0")]),s._v(" "),a("p",[s._v("master_repl_offset:0")]),s._v(" "),a("p",[s._v("repl_backlog_active:0")]),s._v(" "),a("p",[s._v("repl_backlog_size:1048576")]),s._v(" "),a("p",[s._v("repl_backlog_first_byte_offset:0")]),s._v(" "),a("p",[s._v("repl_backlog_histlen:0")]),s._v(" "),a("p",[a("strong",[s._v("3.")]),s._v(" "),a("strong",[s._v("主库写入测试同步")])]),s._v(" "),a("p",[s._v("# 主虚拟机1")]),s._v(" "),a("p",[s._v("set b b")]),s._v(" "),a("p",[s._v("# 从虚拟机2")]),s._v(" "),a("p",[s._v("keys *")]),s._v(" "),a("p",[s._v("get b")]),s._v(" "),a("p",[s._v("# 从虚拟机3")]),s._v(" "),a("p",[s._v("keys *")]),s._v(" "),a("p",[s._v("get b")]),s._v(" "),a("p",[a("strong",[s._v("4.")]),s._v(" "),a("strong",[s._v("从库只读测试")])]),s._v(" "),a("p",[s._v("# 从虚拟机2")]),s._v(" "),a("p",[s._v("set c c")]),s._v(" "),a("p",[s._v("# result : (error) READONLY You can't write against a read only slave.")]),s._v(" "),a("p",[s._v("# 从虚拟机3")]),s._v(" "),a("p",[s._v("set c c")]),s._v(" "),a("p",[s._v("# result : (error) READONLY You can't write against a read only slave.")]),s._v(" "),a("p",[a("strong",[s._v("5.")]),s._v(" "),a("strong",[s._v("成功redis-sentinel日志")])]),s._v(" "),a("p",[s._v("# 查看日志：")]),s._v(" "),a("p",[s._v("tailf /var/log/redis/sentinel.log")]),s._v(" "),a("p",[s._v("成功日志，+slave slave包含两台从库的地址，+sentinel sentinel包含两台哨兵的id")]),s._v(" "),a("p",[s._v("57611:X 21 Oct 02:03:27.777 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.")]),s._v(" "),a("p",[s._v("57611:X 21 Oct 02:03:27.777 # Sentinel ID is 42975048e2f70d0f4d718f77427930c16bc0b522")]),s._v(" "),a("p",[s._v("57611:X 21 Oct 02:03:27.777 # +monitor master mymaster 192.168.200.211 6379 quorum 2")]),s._v(" "),a("p",[s._v("57611:X 21 Oct 02:03:27.778 * +slave slave 192.168.200.213:6379 192.168.200.213 6379 @ mymaster 192.168.200.211 6379")]),s._v(" "),a("p",[s._v("57611:X 21 Oct 02:03:27.779 * +slave slave 192.168.200.212:6379 192.168.200.212 6379 @ mymaster 192.168.200.211 6379")]),s._v(" "),a("p",[s._v("57611:X 21 Oct 02:03:29.767 * +sentinel sentinel 29222b827e3739b564939c6f20eb610802b48706 192.168.200.212 26379 @ mymaster 192.168.200.211 6379")]),s._v(" "),a("p",[s._v("57611:X 21 Oct 02:03:29.769 * +sentinel sentinel ea3c41804d2840a4393bbdaf0f32dab321267a9c 192.168.200.213 26379 @ mymaster 192.168.200.211 6379")]),s._v(" "),a("p",[a("strong",[s._v("6.")]),s._v(" "),a("strong",[s._v("成功sentinel的连接状态")])]),s._v(" "),a("p",[s._v("# 主虚拟机1")]),s._v(" "),a("p",[s._v("redis-cli -h 192.168.200.211 -p 26379 INFO Sentinel")]),s._v(" "),a("p",[s._v("# result：")]),s._v(" "),a("p",[s._v("# Sentinel")]),s._v(" "),a("p",[s._v("sentinel_masters:1")]),s._v(" "),a("p",[s._v("sentinel_tilt:0")]),s._v(" "),a("p",[s._v("sentinel_running_scripts:0")]),s._v(" "),a("p",[s._v("sentinel_scripts_queue_length:0")]),s._v(" "),a("p",[s._v("sentinel_simulate_failure_flags:0")]),s._v(" "),a("p",[s._v("master0:name=mymaster,status=ok,address=192.168.200.211:6379,slaves=2,sentinels=")]),s._v(" "),a("p",[s._v("# 从虚拟机2")]),s._v(" "),a("p",[s._v("redis-cli -h 192.168.200.212 -p 26379 INFO Sentinel")]),s._v(" "),a("p",[s._v("# Sentinel")]),s._v(" "),a("p",[s._v("sentinel_masters:1")]),s._v(" "),a("p",[s._v("sentinel_tilt:0")]),s._v(" "),a("p",[s._v("sentinel_running_scripts:0")]),s._v(" "),a("p",[s._v("sentinel_scripts_queue_length:0")]),s._v(" "),a("p",[s._v("sentinel_simulate_failure_flags:0")]),s._v(" "),a("p",[s._v("master0:name=mymaster,status=ok,address=192.168.200.211:6379,slaves=2,sentinels=3")]),s._v(" "),a("p",[s._v("# 从虚拟机3")]),s._v(" "),a("p",[s._v("redis-cli -h 192.168.200.213 -p 26379 INFO Sentinel")]),s._v(" "),a("p",[s._v("# Sentinel")]),s._v(" "),a("p",[s._v("sentinel_masters:1")]),s._v(" "),a("p",[s._v("sentinel_tilt:0")]),s._v(" "),a("p",[s._v("sentinel_running_scripts:0")]),s._v(" "),a("p",[s._v("sentinel_scripts_queue_length:0")]),s._v(" "),a("p",[s._v("sentinel_simulate_failure_flags:0")]),s._v(" "),a("p",[s._v("master0:name=mymaster,status=ok,address=192.168.200.211:6379,slaves=2,sentinels=3")]),s._v(" "),a("p",[a("strong",[s._v("7.")]),s._v(" "),a("strong",[s._v("高可用测试case")])]),s._v(" "),a("p",[s._v("哨兵作为对redis实例的监控，通过选举算法保证哨兵的鲁棒性和高可用，所以哨兵至少要部署3台，符合半数原则，需要5或者，7，超过一半，不包含一半存活的时候，才能够选举出leader，才能进行主从的切换功能。\nredis服务，至少需要存活一台，才能保证服务正常运行sentinel 选择新 master 的原则是最近可用 且 数据最新 且 优先级最高 且 活跃最久 ！\n哨兵高可用测试：分别连接对应的redis服务端，手动停止哨兵，停止主reids服务，看主从是否切换成功。\n三哨兵情况：redis实例挂掉两台，剩下一台能够成为主，自动切换")]),s._v(" "),a("p",[s._v("# 保持三个哨兵进程都存在的情况下")]),s._v(" "),a("p",[s._v("# 1. 三个终端分别连接redis，使用info replication查看当前连接状态：")]),s._v(" "),a("p",[s._v("# 主虚拟机1")]),s._v(" "),a("p",[s._v("redis-cli -h 192.168.200.211 -p 6379 -a 123456789 info replication")]),s._v(" "),a("p",[s._v("# 从虚拟机2")]),s._v(" "),a("p",[s._v("redis-cli -h 192.168.200.212 -p 6379 -a 123456789 info replication")]),s._v(" "),a("p",[s._v("# 从虚拟机3")]),s._v(" "),a("p",[s._v("redis-cli -h 192.168.200.213 -p 6379 -a 123456789 info replication")]),s._v(" "),a("p",[s._v("# 2. 停止当前role:master的对应的redis服务,重新检查状态看是否切换")]),s._v(" "),a("p",[s._v("systemctl stop redis")]),s._v(" "),a("p",[s._v("# 虚拟机1的实例转换成为主的redis")]),s._v(" "),a("p",[s._v("# 3. 继续停止剩下两台：role：master的对应的redis服务，重新检查连接状态看是否切换")]),s._v(" "),a("p",[s._v("systemctl stop redis")]),s._v(" "),a("p",[s._v("# 虚拟机3的实例转换成为了主的redis")]),s._v(" "),a("p",[s._v("# 切换顺利，实现高可用")]),s._v(" "),a("p",[s._v("两哨兵情况：redis实例挂掉两台，剩下一台能够成为主，自动切换")]),s._v(" "),a("p",[s._v("# 将全部虚拟机的redis + sentinel重新启动")]),s._v(" "),a("p",[s._v("systemctl start redis")]),s._v(" "),a("p",[s._v("systemctl start redis-sentinel")]),s._v(" "),a("p",[s._v("# 停止虚拟机1的redis-sentinel，重新执行哨兵的案例测试")]),s._v(" "),a("p",[s._v("systemctl stop redis-sentinel")]),s._v(" "),a("p",[s._v("# 分别停止对应master实例的redis，最终剩下一台实例，成为了master，能够自动切换")]),s._v(" "),a("p",[s._v("一哨兵情况：redis实例无法主从切换")]),s._v(" "),a("p",[s._v("# 将全部虚拟机的redis + sentinel重新启动")]),s._v(" "),a("p",[s._v("systemctl start redis")]),s._v(" "),a("p",[s._v("systemctl start redis-sentinel")]),s._v(" "),a("p",[s._v("# 停止虚拟机1和2d的redis-sentinel，重新执行哨兵的案例测试")]),s._v(" "),a("p",[s._v("systemctl stop redis-sentinel")]),s._v(" "),a("p",[s._v("# 分别停止对应master实例的redis，最终剩下一台实例，无法实现主从切换")]),s._v(" "),a("p",[a("strong",[s._v("8. web****服务连接测试")])]),s._v(" "),a("p",[s._v("创建一个web项目，使用项目进行服务器连接验证，暂时不提供。使用spring boot + spring-data-redis进行测试")]),s._v(" "),a("p",[a("strong",[s._v("基本运维操作")])]),s._v(" "),a("p",[a("strong",[s._v("基本命令操作")])]),s._v(" "),a("p",[s._v("# 启动")]),s._v(" "),a("p",[s._v("systemctl start redis")]),s._v(" "),a("p",[s._v("systemctl start redis-sentinel")]),s._v(" "),a("p",[s._v("# 重启")]),s._v(" "),a("p",[s._v("systemctl restart redis")]),s._v(" "),a("p",[s._v("systemctl restart redis-sentinel")]),s._v(" "),a("p",[s._v("# 停止")]),s._v(" "),a("p",[s._v("systemctl stop redis")]),s._v(" "),a("p",[s._v("systemctl stop redis-sentinel")]),s._v(" "),a("p",[s._v("# 开机启动")]),s._v(" "),a("p",[s._v("systemctl enable redis")]),s._v(" "),a("p",[s._v("systemctl enable redis-sentinel")]),s._v(" "),a("p",[s._v("# 关闭开机启动")]),s._v(" "),a("p",[s._v("systemctl disable redis")]),s._v(" "),a("p",[s._v("systemctl disable redis-sentinel")]),s._v(" "),a("p",[s._v("# 卸载,停止redis服务，sentinel服务之后，关闭开机启动，进行卸载")]),s._v(" "),a("p",[s._v("yum remove redis -y")]),s._v(" "),a("p",[a("strong",[s._v("配置文件目录")])]),s._v(" "),a("p",[s._v("redis配置文件：/etc/redis.conf")]),s._v(" "),a("p",[s._v("redis-sentinel配置文件：/etc/redis-sentinel.conf")]),s._v(" "),a("p",[a("strong",[s._v("日志文件目录")])]),s._v(" "),a("p",[s._v("redis日志：/var/log/redis/redis.log")]),s._v(" "),a("p",[s._v("redis-sentinel日志：/var/log/redis/sentinel.log")]),s._v(" "),a("p",[a("strong",[s._v("持久化文件目录")])]),s._v(" "),a("p",[s._v("redis-dump文件：/var/lib/redis/dump.rdb")]),s._v(" "),a("p",[s._v("redis-appendonly文件：/var/lib/redis/appendonly.aof")]),s._v(" "),a("p",[a("strong",[s._v("参考教程")])]),s._v(" "),a("p",[a("a",{attrs:{href:"http://blog.51cto.com/lxsym/297156",target:"_blank",rel:"noopener noreferrer"}},[s._v("在Centos中yum安装和卸载软件的使用方法"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/2df05f279331",target:"_blank",rel:"noopener noreferrer"}},[s._v("Markdown插入表格语法"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/shenlf_bk/article/details/80702463",target:"_blank",rel:"noopener noreferrer"}},[s._v("配置sentinel down-after-milliseconds mymaster 5000报错，解决方案"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://zhaif.us/2016/01/12/redis-2/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis 高可用之 Sentinel 部署与原理"),a("OutboundLink")],1)]),s._v(" "),a("h1",{attrs:{id:"redis命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis命令"}},[s._v("#")]),s._v(" redis命令")]),s._v(" "),a("p",[s._v("http://redisdoc.com/index.html  命令参考")]),s._v(" "),a("h2",{attrs:{id:"_1-redis-cli-命令总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis-cli-命令总结"}},[s._v("#")]),s._v(" 1. redis-cli 命令总结")]),s._v(" "),a("h3",{attrs:{id:"_1-1-连接操作相关的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-连接操作相关的命令"}},[s._v("#")]),s._v(" 1.1 连接操作相关的命令")]),s._v(" "),a("p",[s._v("quit：关闭连接（connection）")]),s._v(" "),a("p",[s._v("auth：简单密码认证")]),s._v(" "),a("h3",{attrs:{id:"_1-2-持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-持久化"}},[s._v("#")]),s._v(" 1.2 持久化")]),s._v(" "),a("p",[s._v("save：将数据同步保存到磁盘")]),s._v(" "),a("p",[s._v("bgsave：将数据异步保存到磁盘")]),s._v(" "),a("p",[s._v("lastsave：返回上次成功将数据保存到磁盘的Unix时戳")]),s._v(" "),a("p",[s._v("shundown：将数据同步保存到磁盘，然后关闭服务")]),s._v(" "),a("h3",{attrs:{id:"_1-3-远程服务控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-远程服务控制"}},[s._v("#")]),s._v(" 1.3 远程服务控制")]),s._v(" "),a("p",[s._v("info：提供服务器的信息和统计")]),s._v(" "),a("p",[s._v("monitor：实时转储收到的请求")]),s._v(" "),a("p",[s._v("slaveof：改变复制策略设置")]),s._v(" "),a("p",[s._v("config：在运行时配置Redis服务器")]),s._v(" "),a("h3",{attrs:{id:"_1-4-对value操作的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-对value操作的命令"}},[s._v("#")]),s._v(" 1.4 对value操作的命令")]),s._v(" "),a("p",[s._v("exists(key)：确认一个key是否存在")]),s._v(" "),a("p",[s._v("del(key)：删除一个key")]),s._v(" "),a("p",[s._v("type(key)：返回值的类型")]),s._v(" "),a("p",[s._v("keys(pattern)：返回满足给定pattern的所有key")]),s._v(" "),a("p",[s._v("randomkey：随机返回key空间的一个")]),s._v(" "),a("p",[s._v("keyrename(oldname, newname)：重命名key")]),s._v(" "),a("p",[s._v("dbsize：返回当前数据库中key的数目")]),s._v(" "),a("p",[s._v("expire：设定一个key的活动时间（s）")]),s._v(" "),a("p",[s._v("ttl：获得一个key的活动时间")]),s._v(" "),a("h3",{attrs:{id:"_1-5-select-index-按索引查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-select-index-按索引查询"}},[s._v("#")]),s._v(" 1.5 select(index)：按索引查询")]),s._v(" "),a("p",[s._v("move(key, dbindex)：移动当前数据库中的key到dbindex数据库")]),s._v(" "),a("p",[s._v("flushdb：删除当前选择数据库中的所有key")]),s._v(" "),a("p",[s._v("flushall：删除所有数据库中的所有key")]),s._v(" "),a("h3",{attrs:{id:"_1-6-对string操作的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-对string操作的命令"}},[s._v("#")]),s._v(" 1.6 对String操作的命令")]),s._v(" "),a("p",[s._v("set(key, value)：给数据库中名称为key的string赋予值value")]),s._v(" "),a("p",[s._v("get(key)：返回数据库中名称为key的string的value")]),s._v(" "),a("p",[s._v("getset(key, value)：给名称为key的string赋予上一次的value")]),s._v(" "),a("p",[s._v("mget(key1, key2,…, key N)：返回库中多个string的value")]),s._v(" "),a("p",[s._v("setnx(key, value)：添加string，名称为key，值为value")]),s._v(" "),a("p",[s._v("setex(key, time, value)：向库中添加string，设定过期时间time")]),s._v(" "),a("p",[s._v("mset(key N, value N)：批量设置多个string的值")]),s._v(" "),a("p",[s._v("msetnx(key N, value N)：如果所有名称为key i的string都不存在")]),s._v(" "),a("p",[s._v("incr(key)：名称为key的string增1操作")]),s._v(" "),a("p",[s._v("incrby(key, integer)：名称为key的string增加integer")]),s._v(" "),a("p",[s._v("decr(key)：名称为key的string减1操作")]),s._v(" "),a("p",[s._v("decrby(key, integer)：名称为key的string减少integer")]),s._v(" "),a("p",[s._v("append(key, value)：名称为key的string的值附加value")]),s._v(" "),a("p",[s._v("substr(key, start, end)：返回名称为key的string的value的子串")]),s._v(" "),a("h3",{attrs:{id:"_1-7-对list操作的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-对list操作的命令"}},[s._v("#")]),s._v(" 1.7 对List操作的命令")]),s._v(" "),a("p",[s._v("rpush(key, value)：在名称为key的list尾添加一个值为value的元素")]),s._v(" "),a("p",[s._v("lpush(key, value)：在名称为key的list头添加一个值为value的 元素")]),s._v(" "),a("p",[s._v("llen(key)：返回名称为key的list的长度")]),s._v(" "),a("p",[s._v("lrange(key, start, end)：返回名称为key的list中start至end之间的元素")]),s._v(" "),a("p",[s._v("ltrim(key, start, end)：截取名称为key的list")]),s._v(" "),a("p",[s._v("lindex(key, index)：返回名称为key的list中index位置的元素")]),s._v(" "),a("p",[s._v("lset(key, index, value)：给名称为key的list中index位置的元素赋值")]),s._v(" "),a("p",[s._v("lrem(key, count, value)：删除count个key的list中值为value的元素")]),s._v(" "),a("p",[s._v("lpop(key)：返回并删除名称为key的list中的首元素")]),s._v(" "),a("p",[s._v("rpop(key)：返回并删除名称为key的list中的尾元素")]),s._v(" "),a("p",[s._v("blpop(key1, key2,… key N, timeout)：lpop命令的block版本。")]),s._v(" "),a("p",[s._v("brpop(key1, key2,… key N, timeout)：rpop的block版本。")]),s._v(" "),a("p",[s._v("rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部")]),s._v(" "),a("h3",{attrs:{id:"_1-8-对set操作的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-对set操作的命令"}},[s._v("#")]),s._v(" 1.8 对Set操作的命令")]),s._v(" "),a("p",[s._v("sadd(key, member)：向名称为key的set中添加元素member")]),s._v(" "),a("p",[s._v("srem(key, member) ：删除名称为key的set中的元素member")]),s._v(" "),a("p",[s._v("spop(key) ：随机返回并删除名称为key的set中一个元素")]),s._v(" "),a("p",[s._v("smove(srckey, dstkey, member) ：移到集合元素")]),s._v(" "),a("p",[s._v("scard(key) ：返回名称为key的set的基数")]),s._v(" "),a("p",[s._v("sismember(key, member) ：member是否是名称为key的set的元素")]),s._v(" "),a("p",[s._v("sinter(key1, key2,…key N) ：求交集")]),s._v(" "),a("p",[s._v("sinterstore(dstkey, (keys)) ：求交集并将交集保存到dstkey的集合")]),s._v(" "),a("p",[s._v("sunion(key1, (keys)) ：求并集")]),s._v(" "),a("p",[s._v("sunionstore(dstkey, (keys)) ：求并集并将并集保存到dstkey的集合")]),s._v(" "),a("p",[s._v("sdiff(key1, (keys)) ：求差集")]),s._v(" "),a("p",[s._v("sdiffstore(dstkey, (keys)) ：求差集并将差集保存到dstkey的集合")]),s._v(" "),a("p",[s._v("smembers(key) ：返回名称为key的set的所有元素")]),s._v(" "),a("p",[s._v("srandmember(key) ：随机返回名称为key的set的一个元素")]),s._v(" "),a("h3",{attrs:{id:"_1-9-对hash操作的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-对hash操作的命令"}},[s._v("#")]),s._v(" 1.9 对Hash操作的命令")]),s._v(" "),a("p",[s._v("hset(key, field, value)：向名称为key的hash中添加元素field")]),s._v(" "),a("p",[s._v("hget(key, field)：返回名称为key的hash中field对应的value")]),s._v(" "),a("p",[s._v("hmget(key, (fields))：返回名称为key的hash中field i对应的value")]),s._v(" "),a("p",[s._v("hmset(key, (fields))：向名称为key的hash中添加元素field")]),s._v(" "),a("p",[s._v("hincrby(key, field, integer)：将名称为key的hash中field的value增加integer")]),s._v(" "),a("p",[s._v("hexists(key, field)：名称为key的hash中是否存在键为field的域")]),s._v(" "),a("p",[s._v("hdel(key, field)：删除名称为key的hash中键为field的域")]),s._v(" "),a("p",[s._v("hlen(key)：返回名称为key的hash中元素个数")]),s._v(" "),a("p",[s._v("hkeys(key)：返回名称为key的hash中所有键")]),s._v(" "),a("p",[s._v("hvals(key)：返回名称为key的hash中所有键对应的value")]),s._v(" "),a("p",[s._v("hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value")]),s._v(" "),a("p",[s._v("启动 Redis 服务")]),s._v(" "),a("p",[s._v("src/redis-server或者src/redis-server redis.conf")]),s._v(" "),a("p",[s._v("src/redis-server redis.conf 1>log.log 2>errlog.log")]),s._v(" "),a("p",[s._v("1为标准输出，2为错误输出")]),s._v(" "),a("p",[s._v("将 Redis 作为 Linux 服务随机启动")]),s._v(" "),a("p",[s._v("vi /etc/rc.local, 加入代码：")]),s._v(" "),a("p",[s._v("/root/install/redis-2.4.9/src/redis-server")]),s._v(" "),a("p",[s._v("客户端连接")]),s._v(" "),a("p",[s._v("src/redis-cli")]),s._v(" "),a("p",[s._v("停止redis服务：")]),s._v(" "),a("p",[s._v("src/redis-cli shutdown")]),s._v(" "),a("p",[s._v("type")]),s._v(" "),a("p",[s._v("返回值的数据类型")]),s._v(" "),a("p",[s._v("type testlist")]),s._v(" "),a("p",[s._v("list")]),s._v(" "),a("p",[s._v("> ping")]),s._v(" "),a("p",[s._v("PONG")]),s._v(" "),a("p",[s._v("测试连接是否还在")]),s._v(" "),a("p",[s._v(">echo name")]),s._v(" "),a("p",[s._v('"larry"')]),s._v(" "),a("p",[s._v("打印")]),s._v(" "),a("p",[s._v("> select ad4databank")]),s._v(" "),a("p",[s._v("OK")]),s._v(" "),a("p",[s._v("数据库切换")]),s._v(" "),a("p",[s._v("> quit")]),s._v(" "),a("p",[s._v("退出连接")]),s._v(" "),a("p",[s._v("> dbsize")]),s._v(" "),a("p",[s._v("(integer) 12")]),s._v(" "),a("p",[s._v("当前数据库中key的数量")]),s._v(" "),a("p",[s._v("> info")]),s._v(" "),a("p",[s._v("服务器基本信息")]),s._v(" "),a("p",[s._v("monitor")]),s._v(" "),a("p",[s._v("实时转储收到的请求")]),s._v(" "),a("p",[s._v("config get")]),s._v(" "),a("p",[s._v("获取服务器的参数配置")]),s._v(" "),a("p",[s._v("flushdb")]),s._v(" "),a("p",[s._v("清空当前数据库")]),s._v(" "),a("p",[s._v("flushall")]),s._v(" "),a("p",[s._v("清除所有数据库")]),s._v(" "),a("p",[s._v("[Redis] redis-cli 命令总结")]),s._v(" "),a("p",[s._v("Redis提供了丰富的命令（command）对数据库和各种数据类型进行操作，这些command可以在Linux终端使用。")]),s._v(" "),a("p",[s._v("在编程时，比如使用Redis 的Java语言包，这些命令都有对应的方法。下面将Redis提供的命令做一总结。")]),s._v(" "),a("p",[s._v("官网命令列表：http://redis.io/commands （英文）")]),s._v(" "),a("h2",{attrs:{id:"_2-redis密码管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis密码管理"}},[s._v("#")]),s._v(" 2. redis密码管理")]),s._v(" "),a("p",[s._v("redis密码管理")]),s._v(" "),a("h3",{attrs:{id:"_2-1-如何初始化redis的密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-如何初始化redis的密码"}},[s._v("#")]),s._v(" 2.1 如何初始化redis的密码？")]),s._v(" "),a("p",[s._v("总共2个步骤：")]),s._v(" "),a("p",[s._v("a.在配置文件中有个参数： requirepass 这个就是配置redis访问密码的参数。")]),s._v(" "),a("p",[s._v("比如 requirepass test123")]),s._v(" "),a("p",[s._v("b.配置文件中参数生效需要重启重启redis 。")]),s._v(" "),a("h3",{attrs:{id:"_2-2-不重启redis如何配置密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-不重启redis如何配置密码"}},[s._v("#")]),s._v(" 2.2 不重启redis如何配置密码?")]),s._v(" "),a("p",[s._v("a. 在配置文件中配置requirepass的密码（当redis重启时密码依然有效）。")]),s._v(" "),a("p",[s._v("# requirepass foobared")]),s._v(" "),a("p",[s._v("如 修改成 :")]),s._v(" "),a("p",[s._v("requirepass test123")]),s._v(" "),a("p",[s._v("b. 进入redis重定义参数")]),s._v(" "),a("p",[s._v("查看当前的密码：")]),s._v(" "),a("p",[s._v("[root@slaver251 redis-2.4.16]# ./src/redis-cli -p 6379")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379>")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379> config get requirepass")]),s._v(" "),a("ol",[a("li",[a("p",[s._v('"requirepass"')])]),s._v(" "),a("li",[a("p",[s._v("(nil)")])])]),s._v(" "),a("p",[s._v("显示密码是空的，")]),s._v(" "),a("p",[s._v("然后设置密码：")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379> config set requirepass test123")]),s._v(" "),a("p",[s._v("OK")]),s._v(" "),a("p",[s._v("再次查询密码：")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379> config get requirepass")]),s._v(" "),a("p",[s._v("(error) ERR operation not permitted")]),s._v(" "),a("p",[s._v("此时报错了！")]),s._v(" "),a("p",[s._v("现在只需要密码认证就可以了。")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379> auth test123")]),s._v(" "),a("p",[s._v("OK")]),s._v(" "),a("p",[s._v("再次查询密码：")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379> config get requirepass")]),s._v(" "),a("ol",[a("li",[a("p",[s._v('"requirepass"')])]),s._v(" "),a("li",[a("p",[s._v('"test123"')])])]),s._v(" "),a("p",[s._v("密码已经得到修改。")]),s._v(" "),a("p",[s._v("当到了可以重启redis的时候 由于配置参数已经修改 所以密码会自动生效。")]),s._v(" "),a("p",[s._v("要是配置参数没添加密码 那么redis重启 密码将相当于没有设置。")]),s._v(" "),a("h3",{attrs:{id:"_2-3-如何登录有密码的redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-如何登录有密码的redis"}},[s._v("#")]),s._v(" 2.3 如何登录有密码的redis？")]),s._v(" "),a("p",[s._v("a.在登录的时候 密码就输入")]),s._v(" "),a("p",[s._v("[root@slaver251 redis-2.4.16]# ./src/redis-cli -p 6379 -a test123")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379>")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379> config get requirepass")]),s._v(" "),a("ol",[a("li",[a("p",[s._v('"requirepass"')])]),s._v(" "),a("li",[a("p",[s._v('"test123"')])])]),s._v(" "),a("p",[s._v("b.先登录再验证：")]),s._v(" "),a("p",[s._v("[root@slaver251 redis-2.4.16]# ./src/redis-cli -p 6379")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379>")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379> auth test123")]),s._v(" "),a("p",[s._v("OK")]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379> config get requirepass")]),s._v(" "),a("ol",[a("li",[a("p",[s._v('"requirepass"')])]),s._v(" "),a("li",[a("p",[s._v('"test123"')])])]),s._v(" "),a("p",[s._v("redis 127.0.0.1:6379>")]),s._v(" "),a("h3",{attrs:{id:"_2-4-master-有密码-slave-如何配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-master-有密码-slave-如何配置"}},[s._v("#")]),s._v(" 2.4 master 有密码,slave 如何配置？")]),s._v(" "),a("p",[s._v("当master 有密码的时候 配置slave 的时候 相应的密码参数也得相应的配置好。不然slave 是无法进行正常复制的。")]),s._v(" "),a("p",[s._v("相应的参数是：")]),s._v(" "),a("p",[s._v("#masterauth")]),s._v(" "),a("p",[s._v("比如:")]),s._v(" "),a("p",[s._v("masterauth mstpassword")]),s._v(" "),a("h2",{attrs:{id:"_3-redis集群和哨兵的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis集群和哨兵的区别"}},[s._v("#")]),s._v(" 3. redis集群和哨兵的区别")]),s._v(" "),a("p",[s._v("哨兵的作用就是监控Redis系统的运行状况。它的功能包括以下两个。")]),s._v(" "),a("p",[s._v("监控主数据库和从数据库是否正常运行。")]),s._v(" "),a("p",[s._v("主数据库出现故障时自动将从数据库转换为主数据库。")]),s._v(" "),a("p",[s._v("sentinel发现master挂了后，就会从slave中重新选举一个master。")]),s._v(" "),a("p",[s._v("哨兵模式强调高可用")]),s._v(" "),a("p",[s._v("Sentinel 系统用于管理多个 Redis 服务器（instance）， 该系统执行以下三个任务：")]),s._v(" "),a("p",[s._v("监控（Monitoring）： Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。")]),s._v(" "),a("p",[s._v("提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。")]),s._v(" "),a("p",[s._v("自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址， 使得集群可以使用新主服务器代替失效服务器。")]),s._v(" "),a("p",[s._v("客户端中不会记录redis的地址（某个IP），而是记录sentinel的地址，这样我们可以直接从sentinel获取的redis地址，因为sentinel会对所有的master、slave进行监控，它是知道到底谁才是真正的master的，例如我们故障转移，这时候对于sentinel来说，master是变了的，然后通知客户端。而客户端根本不用关心到底谁才是真正的master，只关心sentinel告知的master。")]),s._v(" "),a("p",[a("strong",[s._v("集群")])]),s._v(" "),a("p",[s._v("即使使用哨兵，redis每个实例也是全量存储，每个redis存储的内容都是完整的数据，浪费内存且有木桶效应。为了最大化利用内存，可以采用集群，就是分布式存储。即每台redis存储不同的内容，共有16384个slot。每个redis分得一些slot，hash_slot = crc16(key) mod 16384 找到对应slot，键是可用键，如果有{}则取{}内的作为可用键，否则整个键是可用键")]),s._v(" "),a("p",[s._v("集群至少需要3主3从，且每个实例使用不同的配置文件，主从不用配置，集群会自己选。")]),s._v(" "),a("p",[s._v("cluster是为了解决单机Redis容量有限的问题，将数据按一定的规则分配到多台机器。")]),s._v(" "),a("p",[s._v("集群模式提高并发量。")])])}),[],!1,null,null,null);e.default=t.exports}}]);