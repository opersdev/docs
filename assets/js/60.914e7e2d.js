(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{552:function(n,e,t){"use strict";t.r(e);var _=t(22),s=Object(_.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"mysql优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql优化"}},[n._v("#")]),n._v(" MySQL优化")]),n._v(" "),t("ol",[t("li",[t("h4",{attrs:{id:"优化哲学"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化哲学"}},[n._v("#")]),n._v(" 优化哲学")])])]),n._v(" "),t("h5",{attrs:{id:"_1-1-优化有风险"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-优化有风险"}},[n._v("#")]),n._v(" 1.1 优化有风险")]),n._v(" "),t("h5",{attrs:{id:"_1-2-优化的范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-优化的范围"}},[n._v("#")]),n._v(" 1.2 优化的范围")]),n._v(" "),t("p",[n._v("存储、主机和操作系统:\n主机架构稳定性\nI/O规划及配置\nSwap\nOS内核参数\n网络问题\t\n应用 :（Index，lock，session）\n应用程序稳定性和性能\nSQL语句性能\n串行访问资源\n性能欠佳会话管理\n数据库优化:（内存、数据库设计、参数）\n内存\n数据库结构(物理&逻辑)\n实例配置")]),n._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("h5",{attrs:{id:"优化工具介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化工具介绍"}},[n._v("#")]),n._v(" 优化工具介绍")])])]),n._v(" "),t("h5",{attrs:{id:"_2-1-系统层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-系统层"}},[n._v("#")]),n._v(" 2.1 系统层")]),n._v(" "),t("p",[n._v("CPU :  计算(主)和调度(次)"),t("br"),n._v("\nMEM :  缓存和缓冲\nIO  :  输入和输出")]),n._v(" "),t("p",[n._v("(1) top命令")]),n._v(" "),t("p",[n._v("%Cpu(s):  0.0 us, 0.0 sy, 100.0 id,  0.0 wa")]),n._v(" "),t("p",[n._v("id   空闲的CPU时间片占比\nus\t 用户程序工作所占用的时间片占比\nsy   内核工作花费的cpu时间片占比")]),n._v(" "),t("p",[n._v("过高的原因:\n内核本身bug\n并发很高\n锁\nwa\t cpu用来等待的时间片占比\nIO\n等待大的处理事件\n锁\nKiB Mem :  4937752 total,  3988956 free,   476100 used,   472696 buff/cache   4193924 avail Mem\nKiB Swap:  1048572 total,  1048572 free,        0 used.")]),n._v(" "),t("p",[n._v("(2) iostat\n[root@db01 ~]# iostat -dk 1")]),n._v(" "),t("p",[n._v("一般情况下，CPU高，IO也应该高。\n如果：CPU 高   ，IO 比较低\nwait 高：  有可以能IO出问题了（Raid ，过度条带化）"),t("br"),n._v("\nSyS  高：  有可能是锁的问题，需要进一步去数据库中判断")]),n._v(" "),t("p",[n._v("(3) vmstat\n[root@db01 ~]# vmstat   1")]),n._v(" "),t("h5",{attrs:{id:"_2-2-数据库层工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-数据库层工具"}},[n._v("#")]),n._v(" 2.2 数据库层工具")]),n._v(" "),t("p",[n._v("?    show status"),t("br"),n._v("\n?    show variables\n?    show index"),t("br"),n._v("\n?    show processlist\n?    show slave status\n?    show engine innodb status\n?    desc /explain\n?    slowlog\n?")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("扩展类深度优化:\npt系列（pt-query-digest pt-osc pt-index 等）\nmysqlslap \nsysbench \ninformation_schema （I_S）\nperformance_schema (P_S)\nsys \n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[t("h5",{attrs:{id:"优化思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化思路"}},[n._v("#")]),n._v(" 优化思路")])])]),n._v(" "),t("h5",{attrs:{id:"_3-0-未优化前的压力测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-未优化前的压力测试"}},[n._v("#")]),n._v(" 3.0 未优化前的压力测试")]),n._v(" "),t("p",[n._v("db01 [(none)]>create database oldguo charset utf8mb4;\ndb01 [(none)]>use oldguo;\ndb01 [oldguo]>set sql_log_bin=0;\ndb01 [oldguo]>source t100w.sql\ndb01 [oldguo]>grant all on "),t("em",[n._v(".")]),n._v(" to root@'localhost' identified by '123';")]),n._v(" "),t("p",[n._v("[root@db01 ~]# mysqlslap --defaults-file=/etc/my.cnf "),t("br"),n._v("\n--concurrency=100 --iterations=1 --create-schema='oldguo' "),t("br"),n._v("\n--query=\"select * from oldguo.t100w where k2='ABxy'\" engine=innodb "),t("br"),n._v("\n--number-of-queries=200 -uroot -p123 -verbose")]),n._v(" "),t("h5",{attrs:{id:"_3-1-主机-存储-网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-主机-存储-网络"}},[n._v("#")]),n._v(" 3.1 主机,存储,网络")]),n._v(" "),t("p",[n._v("主机\n真实的硬件（PC Server）: DELL  R系列 ，华为，浪潮，HP，曙光,联想\n云产品：ECS、数据库RDS、DRDS、PolarDB\nIBM 小型机 P6  570  595   P7 720  750  780     P8")]),n._v(" "),t("p",[n._v("CPU根据数据库类型\nOLTP\nOLAP")]),n._v(" "),t("p",[n._v("IO密集型：线上系统，OLTP主要是IO密集型的业务，高并发\nCPU密集型：数据分析数据处理，OLAP，cpu密集型的，需要CPU高计算能力（i系列，IBM power系列）\nCPU密集型： I 系列的，主频很高，核心少\nIO密集型：  E系列（至强），主频相对低，核心数量多")]),n._v(" "),t("p",[n._v("内存\n建议2-3倍cpu核心数量 （ECC）")]),n._v(" "),t("p",[n._v("磁盘选择\nSATA-III   SAS    Fc    SSD（sata） pci-e ssd  Flash\n主机 RAID卡的BBU(Battery Backup Unit)关闭")]),n._v(" "),t("p",[n._v("存储\n根据存储数据种类的不同，选择不同的存储设备\n配置合理的RAID级别(raid5、raid10、热备盘)")]),n._v(" "),t("p",[n._v("r0 :条带化 ,性能高\nr1 :镜像，安全\nr5 :校验+条带化，安全较高+性能较高（读），写性能较低 （适合于读多写少）\nr10：安全+性能都很高，最少四块盘，浪费一半的空间（高IO要求）")]),n._v(" "),t("p",[n._v("网络\n1、硬件买好的（单卡单口）\n2、网卡绑定（bonding），交换机堆叠\n以上问题，提前规避掉。")]),n._v(" "),t("h5",{attrs:{id:"_3-2-系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-系统"}},[n._v("#")]),n._v(" 3.2 系统")]),n._v(" "),t("p",[n._v("Swap调整\necho 0 >/proc/sys/vm/swappiness的内容改成0（临时），\nvim /etc/sysctl.conf\n上添加vm.swappiness=0（永久）\nsysctl -p")]),n._v(" "),t("p",[n._v("IO调度策略")]),n._v(" "),t("p",[n._v("centos 7 默认是deadline\ncat   /sys/block/sda/queue/scheduler")]),n._v(" "),t("p",[n._v("#临时修改为deadline(centos6)")]),n._v(" "),t("p",[n._v("echo deadline >/sys/block/sda/queue/scheduler\nvi /boot/grub/grub.conf\n更改到如下内容:\nkernel /boot/vmlinuz-2.6.18-8.el5 ro root=LABEL=/ elevator=deadline rhgb quiet")]),n._v(" "),t("p",[n._v("IO ：\nraid\nno lvm\next4或xfs\nssd\nIO调度策略\t\n提前规划好以上所有问题，减轻MySQL优化的难度。")]),n._v(" "),t("h5",{attrs:{id:"_3-3-数据库实例-参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-数据库实例-参数"}},[n._v("#")]),n._v(" 3.3 数据库实例(参数)")]),n._v(" "),t("p",[n._v("3.3.1 Max_connections *****\n（1）简介\nMysql的最大连接数，如果服务器的并发请求量比较大，可以调高这个值，当然这是要建立在机器能够支撑的情况下，因为如果连接数越来越多，mysql会为每个连接提供缓冲区，就会开销的越多的内存，所以需要适当的调整该值，不能随便去提高设值。\n（2）判断依据\nshow variables like 'max_connections';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_connections | 151   |\n+-----------------+-------+\nshow status like 'Max_used_connections';\n+----------------------+-------+\n| Variable_name        | Value |\n+----------------------+-------+\n| Max_used_connections | 101   |\n+----------------------+-------+")]),n._v(" "),t("p",[n._v("（3）修改方式举例\nvim /etc/my.cnf\nMax_connections=1024")]),n._v(" "),t("p",[n._v("补充:\n1.开启数据库时,我们可以临时设置一个比较大的测试值\n2.观察show status like 'Max_used_connections';变化\n3.如果max_used_connections跟max_connections相同,\n那么就是max_connections设置过低或者超过服务器的负载上限了")]),n._v(" "),t("p",[n._v("3.3.2 back_log ***\n（1）简介\nmysql能暂存的连接数量，当主要mysql线程在一个很短时间内得到非常多的连接请求时候它就会起作用，如果mysql的连接数据达到max_connections时候，新来的请求将会被存在堆栈中，等待某一连接释放资源，该推栈的数量及back_log,如果等待连接的数量超过back_log，将不被授予连接资源。\nback_log值指出在mysql暂时停止回答新请求之前的短时间内有多少个请求可以被存在推栈中，只有如果期望在一个短时间内有很多连接的时候需要增加它\n（2）判断依据\nshow full processlist\n发现大量的待连接进程时，就需要加大back_log或者加大max_connections的值\n（3）修改方式举例\nvim /etc/my.cnf\nback_log=1024")]),n._v(" "),t("p",[n._v("3.3.3 wait_timeout和interactive_timeout ****")]),n._v(" "),t("p",[n._v("（1）简介\nwait_timeout：指的是mysql在关闭一个非交互的连接之前所要等待的秒数\ninteractive_timeout：指的是mysql在关闭一个交互的连接之前所需要等待的秒数，比如我们在终端上进行mysql管理，使用的即使交互的连接，这时候，如果没有操作的时间超过了interactive_time设置的时间就会自动的断开，默认的是28800，可调优为7200。\nwait_timeout:如果设置太小，那么连接关闭的就很快，从而使一些持久的连接不起作用\n（2）设置建议\n如果设置太大，容易造成连接打开时间过长，在show processlist时候，能看到很多的连接 ，一般希望wait_timeout尽可能低\n（3）修改方式举例\nwait_timeout=60\ninteractive_timeout=1200\n长连接的应用，为了不去反复的回收和分配资源，降低额外的开销。\n一般我们会将wait_timeout设定比较小，interactive_timeout要和应用开发人员沟通长链接的应用是否很多。如果他需要长链接，那么这个值可以不需要调整。\n另外还可以使用类外的参数弥补。")]),n._v(" "),t("p",[n._v('3.3.4 key_buffer_size *****\n(1) myisam 表的索引缓冲区\n(2) 临时表的缓冲区\nmysql> show status like "created_tmp%";\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Created_tmp_disk_tables | 0     |\n| Created_tmp_files       | 6     |\n| Created_tmp_tables      | 1     |')]),n._v(" "),t("p",[n._v("Created_tmp_tables/(Created_tmp_disk_tables + Created_tmp_tables)   越高越好\nCreated_tmp_disk_tables/(Created_tmp_disk_tables + Created_tmp_tables)\nCreated_tmp_disk_tables/(Created_tmp_disk_tables + Created_tmp_tables)")]),n._v(" "),t("p",[n._v('控制在5%-10%以内\nmysql> show variables like "key_buffer_size%";')]),n._v(" "),t("h5",{attrs:{id:"_3-4-优化后的压力测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-优化后的压力测试"}},[n._v("#")]),n._v(" 3.4 优化后的压力测试")]),n._v(" "),t("p",[n._v("max_connections=1024\nback_log=128\nwait_timeout=60\ninteractive_timeout=7200\nkey_buffer_size=16M\nquery_cache_size=64M\nquery_cache_type=1\nquery_cache_limit=50M\nmax_connect_errors=20\nsort_buffer_size=2M\nmax_allowed_packet=32M\njoin_buffer_size=2M\nthread_cache_size=200\ninnodb_buffer_pool_size=1024M\ninnodb_flush_log_at_trx_commit=1\ninnodb_log_buffer_size=32M\ninnodb_log_file_size=128M\ninnodb_log_files_in_group=3\nbinlog_cache_size=2M\nmax_binlog_cache_size=8M\nmax_binlog_size=512M\nexpire_logs_days=7\nread_buffer_size=2M\nread_rnd_buffer_size=2M\nbulk_insert_buffer_size=8M")]),n._v(" "),t("h5",{attrs:{id:"_3-5-应用层面优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-应用层面优化"}},[n._v("#")]),n._v(" 3.5 应用层面优化")])])}),[],!1,null,null,null);e.default=s.exports}}]);